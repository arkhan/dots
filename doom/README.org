#+TITLE:   Configuración de Emacs usando Doom Emacs
#+DATE:    mayo 13, 2019
#+SINCE:   {replace with next tagged release version}
#+STARTUP: inlineimages

* Config
** init.el
*** init.el
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :completion
       (company +auto
                +childframe)
       (ivy +childframe
            +icons)

       :ui
       doom-dashboard
       doom-quit
       fill-column
       hl-todo
       indent-guides
       modeline
       nav-flash
       neotree
       ophints
       (popup +all
              +defaults)
       pretty-code
       unicode
       vc-gutter
       window-select
       workspaces

       :editor
       file-templates
       (format +onsave)
       multiple-cursors
       parinfer
       rotate-text
       snippets

       :emacs
       dired
       electric
       vc

       :tools
       ansible
       docker
       editorconfig
       eval
       flycheck
       (flyspell +hunspell)
       (lookup +docsets)
       magit
       make
       pass
       pdf
       rgb
       terraform
       tmux
       upload

       :lang
       data
       emacs-lisp
       latex
       (org +attach
            +babel
            +capture
            +export
            +habit
            +present
            +protocol
            +rest)
       (python +pyenv)
       rest
       (sh +zsh)

       :email
       mu4e

       :app
       (write +langtool)

       :collab

       :config
       (default +bindings +smartparens))
#+END_SRC
*** Auto Tangle
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun tangle-init-async ()
  "If the current buffer is 'README.org' the code-blocks are tangled."
  (when (or (equal (buffer-file-name) (expand-file-name (concat doom-private-dir "README.org")))
            (equal (buffer-file-name) (expand-file-name "~/.dots/doom/README.org")))
    (let ((prog-mode-hook nil))
      (async-shell-command "sh -c \"~/.emacs.d/bin/org-tangle ~/.doom.d/README.org\""))))

(add-hook 'after-save-hook 'tangle-init-async)
#+END_SRC
** Lang
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq current-language-environment "Spanish"
      org-export-default-language "es")
#+END_SRC
* Editor
** Company
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! company-prescient)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
 (def-package! company-prescient
   :after company
   :init (company-prescient-mode))
#+END_SRC
** Move-dup
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! move-dup)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! move-dup
  :defer t
  :diminish move-dup-mode
  :bind (("S-M-<up>" . md/move-lines-up)
         ("S-M-<down>" . md/move-lines-down)
         ("C-M-<up>" . md/duplicate-up)
         ("C-M-<down>" . md/duplicate-down))
  :init (global-move-dup-mode))
#+END_SRC
** Snnipets
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-sync-snippets)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! org-sync-snippets
  :init (add-hook 'yas-after-reload-hook 'org-sync-snippets-org-to-snippets)
  :config (setq org-sync-snippets-snippets-dir +snippets-dir
                org-sync-snippets-org-snippets-file (concat +snippets-dir "snippets.org")))
#+END_SRC
* UI
** Cursor
#+BEGIN_SRC emacs-lisp :tangle config.el
  (setq-default cursor-type '(hbar . 2))
  (setq x-stretch-cursor t)

  (def-package! frame
    :config
    (defun set-cursor-hook (frame)
      (modify-frame-parameters
       frame (list (cons 'cursor-color "white"))))

    (add-hook 'after-make-frame-functions 'set-cursor-hook))

(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))
#+END_SRC
** Fringe
#+BEGIN_SRC emacs-lisp :tangle config.el
(fringe-mode nil)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Code New Roman" :size 17))
#+END_SRC
** Ivy
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! ivy-explorer)
(package! ivy-prescient)
#+END_SRC
*** ivy-prescient
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! ivy-prescient
  :after ivy
  :init (ivy-prescient-mode))
#+END_SRC
*** ivy-posframe
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! ivy-posframe
  :config
  (setq ivy-posframe-parameters nil
        ivy-display-function #'ivy-posframe-display-at-frame-bottom-left
        ivy-posframe-hide-minibuffer nil
        ivy-posframe-width (frame-width)
        ivy-posframe-border-width 0))
#+END_SRC
*** ivy-explorer
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! ivy-explorer
  :config
  (if (display-graphic-p)
      (setq ivy-explorer-message-function #'ivy-explorer--posframe))
  (ivy-explorer-mode 1))
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! swiper
  :bind* (("C-s" . swiper)
          ("C-r" . swiper)
          ("C-M-s" . swiper-all))
  :bind
  (:map read-expression-map
    ("C-r" . counsel-minibuffer-history)))
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq display-line-numbers-type nil)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp :tangle no
(def-package! doom-modeline
  :config
  (setq doom-modeline-icon nil
        doom-modeline-height 12)
  (defsubst fake-font-height () 0)
  (advice-add #'doom-modeline--font-height :override #'fake-font-height))
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! shrink-path)

(def-package! neotree
  :config
  (setq neo-theme 'icons
        neo-vc-integration nil
        neo-window-width 36
        neo-create-file-auto-open t
        neo-smart-open t
        neo-show-auto-change-root t
        neo-autorefresh nil
        neo-banner-message nil
        neo-mode-line-type 'neotree
        neo-dont-be-alone t
        neo-persist-show t
        neo-show-updir-line nil
        neo-show-hidden-files nil
        neo-auto-indent-point t
        neo-hidden-regexp-list '(".DS_Store" ".idea/" ".pyc" ".tern-port"
                                 ".git/*" "node_modules/*" ".meteor" "_build" "deps"))
  (defun shrink-root-entry (node)
    "shrink-print pwd in neotree"
    (insert (propertize (concat (shrink-path-dirs node) "\n") 'face `(:inherit (,neo-root-dir-face)))))

 (advice-add #'neo-buffer--insert-root-entry :override #'shrink-root-entry))
#+END_SRC
** Pretty Code
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq +pretty-code-symbols
      '(:name "»"
        :src_block "»"
        :src_block_end "«"
        :lambda "λ"
        :not "￢"
        :in "∈"
        :not-in "∉"
        :and "∧"
        :or "∨"))

(defvar +pretty-code-extra-ligatures
  '(("==" . ?\u2261)
    ("!=" . ?\u2260)
    (">=" . ?\u2265)
    ("<=" . ?\u2264)))

(setq-default prettify-symbols-alist
              (append prettify-symbols-alist
                      +pretty-code-extra-ligatures))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! vibrant-ink-theme :recipe (:fetcher github :repo "arkhan/vibrant-ink-theme"))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! vibrant-ink-theme
  :config (add-hook 'after-init-hook
                    (lambda ()
                      (load-theme 'vibrant-ink t))))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! which-key-posframe)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle config.el
 (def-package! which-key-posframe
   :config
   (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-left-corner
         which-key-posframe-border-width 0)
   (which-key-posframe-mode))
#+END_SRC
* Lang
** Python
*** Disable Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
;;(package! anaconda-mode :disable t)
;;(package! conda :disable t)
;;(package! company-anaconda :disable t)
(package! pipenv :disable t)
#+END_SRC
*** lsp-python
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook! python-mode
  (setq python-shell-interpreter "python"
        lsp-pyls-configuration-sources ["flake8"]
        lsp-pyls-plugins-pylint-enabled nil))

(add-hook 'python-mode-hook 'lsp)
#+END_SRC
*** pyenv
**** packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! pyenv-mode-auto)
#+END_SRC
**** config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! pyenv-mode-auto)
#+END_SRC
** PO
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! po-mode
  :mode ("\\.po\\'" . po-mode)
  :config
  ;; Fuente: https://www.emacswiki.org/emacs/PoMode
  (defun po-wrap ()
    "Filter current po-mode buffer through `msgcat' tool to wrap all lines."
    (interactive)
    (if (eq major-mode 'po-mode)
        (let ((tmp-file (make-temp-file "po-wrap."))
              (tmp-buf (generate-new-buffer "*temp*")))
          (unwind-protect
              (progn
                (write-region (point-min) (point-max) tmp-file nil 1)
                (if (zerop
                     (call-process
                      "msgcat" nil tmp-buf t (shell-quote-argument tmp-file)))
                    (let ((saved (point))
                          (inhibit-read-only t))
                      (delete-region (point-min) (point-max))
                      (insert-buffer-substring tmp-buf)
                      (goto-char (min saved (point-max))))
                  (with-current-buffer tmp-buf
                    (error (buffer-string)))))
            (kill-buffer tmp-buf)
            (delete-file tmp-file)))))

  (defun po-guess-language ()
    "Return the language related to this PO file."
    (save-excursion
      (goto-char (point-min))
      (re-search-forward po-any-msgstr-block-regexp)
      (goto-char (match-beginning 0))
      (if (re-search-forward
           "\n\"Language: +\\(.+\\)\\\\n\"$"
           (match-end 0) t)
          (po-match-string 1))))

  (defadvice po-edit-string (around setup-spell-checking (string type expand-tabs) activate)
    "Set up spell checking in subedit buffer."
    (let ((po-language (po-guess-language)))
      ad-do-it
      (if po-language
          (progn
            (ispell-change-dictionary po-language)
            (turn-on-flyspell)
            (flyspell-buffer))))))
#+END_SRC
** Org
** Xml
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun nxml-template ()
  (interactive)
  (insert "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n"))

(add-hook 'nxml-mode-hook
          '(lambda () (when (empty-buffer?) (nxml-template))))

(def-package! nxml-mode
  :mode (("\\.plist\\'" . nxml-mode)
         ("\\.rss\\'"   . nxml-mode)
         ("\\.svg\\'"   . nxml-mode)
         ("\\.xml\\'"   . nxml-mode)
         ("\\.xsd\\'"   . nxml-mode)
         ("\\.xslt\\'"  . nxml-mode)
         ("\\.pom$"     . nxml-mode))
  :config
  (setq nxml-slash-auto-complete-flag t
        nxml-auto-insert-xml-declaration-flag t)
  (add-to-list 'magic-mode-alist '("<\\?xml" . nxml-mode))
  (mapc
   (lambda (pair)
     (if (or (eq (cdr pair) 'xml-mode)
             (eq (cdr pair) 'sgml-mode))
         (setcdr pair 'nxml-mode)))
   auto-mode-alist)

  ;; https://gist.github.com/DinoChiesa/5489021
  (defun pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
      http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
      this. The function inserts linebreaks to separate tags that have
      nothing but whitespace between them. It then indents the markup
      by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
      (nxml-mode)
      ;; split <foo><bar> or </foo><bar>, but not <foo></foo>
      (goto-char begin)
      (while (search-forward-regexp ">[ \t]*<[^/]" end t)
        (backward-char 2) (insert "\n") (incf end))
      ;; split <foo/></foo> and </foo></foo>
      (goto-char begin)
      (while (search-forward-regexp "<.*?/.*?>[ \t]*<" end t)
        (backward-char) (insert "\n") (incf end))
      ;; put xml namespace decls on newline
      (goto-char begin)
      (while (search-forward-regexp "\\(<\\([a-zA-Z][-:A-Za-z0-9]*\\)\\|['\"]\\) \\(xmlns[=:]\\)" end t)
        (goto-char (match-end 0))
        (backward-char 6) (insert "\n") (incf end))
      (indent-region begin end nil)
      (normal-mode))
    (message "All indented!"))

  (defun pretty-print-xml-buffer ()
    "pretty print the XML in a buffer."
    (interactive)
    (pretty-print-xml-region (point-min) (point-max)))

  (define-key nxml-mode-map (kbd "C-x f") 'pretty-print-xml-buffer))
#+END_SRC
* Tools
** BugHunter
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! bug-hunter)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! bug-hunter
  :commands (bug-hunter-file bug-hunter-init-file))
#+END_SRC
** Calendar
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-caldav)
(package! calfw)
(package! calfw-org)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! org-caldav
  :bind ("<f6>" . org-caldav-sync)
  :config
  (setq org-icalendar-alarm-time 30
        org-icalendar-categories '(all-tags category todo-state)
        org-icalendar-include-todo t
        org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
        org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
        org-icalendar-with-timestamps t
        org-icalender-sync-todo t
        org-icalendar-timezone "America/Guayaquil")

  (setq org-caldav-calendars '((:calendar-id "arkhan/work"
                                             :files ("~/org/work.org")
                                             :inbox "~/org/inbox.org")
                               (:calendar-id "arkhan/stuff"
                                             :files ("~/org/stuff.org")
                                             :inbox "~/org/inbox.org"))
        org-caldav-files org-agenda-files
        org-caldav-save-directory (concat doom-cache-dir "dav")
        org-caldav-show-sync-results nil
        org-caldav-url "https://cloud.disroot.org/remote.php/dav/calendars")
  (make-directory org-caldav-save-directory :parents)
  (setq org-caldav-backup-file (concat org-caldav-save-directory "caldav-backup.org")))


(def-package! calfw
  :bind ("C-c f" . cfw:open-org-calendar)
  :config
  (setq cfw:org-overwrite-default-keybinding t
        cfw:display-calendar-holidays nil
        calendar-week-start-day 1))

(def-package! calfw-org)
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp :tangle config.el
(add-hook! flyspell
   (setq-default ispell-really-hunspell t
                 ispell-check-comments t
                 ispell-local-dictionary "en_US"
                 ispell-local-dictionary-alist
                 '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
                   ("es_EC" "[[:alpha:]]" "[^[:alpha:]]" "[ñ]" nil ("-d" "es_EC") nil utf-8))))

(defun switch-dictionary ()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "en_US") "es_EC" "en_US")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(defun turn-on-spell-check ()
  (flyspell-mode 1))

(map! "<f7>" #'flyspell-mode!
      (:after flyspell
        :map flyspell-mode-map
        "M-i" #'switch-dictionary
        "C-M-'" #'flyspell-correct-word-generic))
#+END_SRC
** i3wm
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! i3wm-config-mode :recipe (:fetcher github :repo "Alexander-Miller/i3wm-Config-Mode"))
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
  (def-package! i3wm-config-mode)
#+END_SRC
** Terminal
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! terminal-here)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
 (def-package! terminal-here
    :bind (("C-<f5>" . terminal-here-launch)
           ("C-<f6>" . terminal-here-project-launch))
    :config (setq terminal-here-terminal-command (list "urxvtcd" "-e" "tmx")))
#+END_SRC
** mu4e
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! mu4e-alert)
(package! link-hint)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! link-hint
  :bind (("C-c l o" . link-hint-open-link)
         ("C-c l c" . link-hint-copy-link)))

(def-package! mu4e
  :init
  (setq mu4e-context-policy nil
        mu4e-compose-context-policy 'ask
        mu4e-view-use-gnus nil)

  (defadvice mu4e-quit (after mu4e-close-and-push activate)
    "Despues de salir de mu4e ejecutamos un script para subir los cambios al buzon de correo y para también restaurar la disposición de ventanas"
    (start-process "pushmail" "*pushmail-mbsync*" "mbsync" "-a" "--push")
    (when (get-register :mu4e-fullscreen)
      (jump-to-register :mu4e-fullscreen)))

  (run-at-time nil (* 60 5) 'mu4e-update-mail-and-index t)

  (set-email-account! "Work"
                      '((mu4e-sent-folder       . "/Work/Sent")
                        (mu4e-drafts-folder     . "/Work/Drafts")
                        (mu4e-trash-folder      . "/Work/Trash")
                        (mu4e-refile-folder     . "/Work/Archive")
                        (smtpmail-smtp-user     . "edison@disroot.org")
                        (user-mail-address      . "edison@disroot.org")
                        (user-full-name         . "Edison Ibáñez")
                        (mu4e-compose-signature . "\nEdison Ibáñez"))
                      t)

  (set-email-account! "Personal"
                      '((mu4e-sent-folder       . "/Personal/Sent")
                        (mu4e-drafts-folder     . "/Personal/Drafts")
                        (mu4e-trash-folder      . "/Personal/Trash")
                        (mu4e-refile-folder     . "/Personal/Archive")
                        (smtpmail-smtp-user     . "arkhan@disroot.org")
                        (user-mail-address      . "arkhan@disroot.org")
                        (user-full-name         . "Edison Ibáñez")
                        (mu4e-compose-signature . "\nEdison Ibáñez"))
                      t)

  (set-email-account! "Gmail"
                      '((mu4e-sent-folder       . "/Gmail/Sent Items")
                        (mu4e-drafts-folder     . "/Gmail/Drafts")
                        (mu4e-trash-folder      . "/Gmail/Deleted Items")
                        (mu4e-refile-folder     . "/Gmail/Archive")
                        (smtpmail-smtp-user     . "arkhan.xxx@gmail.com")
                        (user-mail-address      . "arkhan.xxx@gmail.com")
                        (user-full-name         . "Edison Ibáñez")
                        (mu4e-compose-signature . "\nEdison Ibáñez"))
                      t))

(def-package! mu4e-alert
  :init
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
  (setq mu4e-compose-forward-as-attachment t
        mu4e-index-update-in-background t
        mu4e-alert-email-notification-types '(subjects))
  :config
  (defun conf:refresh-mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display))
  (run-with-timer 0 60 'conf:refresh-mu4e-alert-mode-line)
  (mu4e-alert-set-default-style 'libnotify))
#+END_SRC
** Pass
#+BEGIN_SRC emacs-lisp :tangle config.el
  (def-package! auth-source
    :init (setq auth-source-debug t
                auth-source-do-cache nil))
#+END_SRC
** PKGBUILD
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! pkgbuild-mode)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! pkgbuild-mode
  :mode "PKGBUILD\\'")
#+END_SRC
** VLF
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! vlf)
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
(def-package! vlf-setup
  :init (setq vlf-application 'dont-ask))
#+END_SRC
** xrdb
*** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! xrdb-mode :recipe (:fetcher github :repo "arkhan/xrdb-mode"))
#+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp :tangle config.el
  (def-package! xrdb-mode
    :mode (("\\.Xdefaults$" . xrdb-mode)
           ("\\Xdefaults$" . xrdb-mode)
           ("\\.Xenvironment$" . xrdb-mode)
           ("\\Xenvironment$" . xrdb-mode)
           ("\\.Xresources$" . xrdb-mode)
           ("\\Xresources$" . xrdb-mode)
           (".*\\.ad$" . xrdb-mode)
           (".*\\.x?rdb$" . xrdb-mode))
    :config
    (add-hook 'xrdb-mode-hook (lambda () (setq comment-start "! "))))
#+END_SRC
