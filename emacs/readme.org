#+TITLE:     Configuraci√≥n de Emacs usando Org-Babel
#+AUTHOR:    arkhan
#+EMAIL:     arkhan@disroot.org
#+BABEL: :cache yes
#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: author:nil date:nil toc:nil title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmonofont[Scale=0.7]{DejaVu Sans Mono}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{breaklines}

* Config
** base
#+begin_src emacs-lisp
;;; init.el --- Emacs Configuration -*- lexical-binding: t -*-
;;; Commentary:
;; This config start here

(defvar cfg--file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)

(defvar conf:cache-dir (concat user-emacs-directory "cache/"))
(unless (file-exists-p conf:cache-dir)
  (make-directory conf:cache-dir))

(setq nsm-settings-file (concat conf:cache-dir "network-security.data"))
(setq network-security-level 'high)

(defvar bootstrap-version)
(let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq load-prefer-newer t)

(setq straight-check-for-modifications '(check-on-save-find-when-checking))

(require 'straight-x)

(straight-use-package 'leaf)
(straight-use-package 'leaf-keywords)

(leaf leaf
  :doc "Symplify your init.el configuration"
  :doc "Initialize leaf dependent packages"
  :require t
  :config
  (leaf leaf-keywords
    :require t
    :config (leaf-keywords-init)))

(leaf async
  :straight t
  :leaf-defer nil
  :config (setq async-bytecomp-package-mode t))

(setq inhibit-startup-screen t
      use-dialog-box nil
      use-file-dialog nil
      initial-scratch-message nil
      large-file-warning-threshold (* 15 1024 1024))

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(toggle-indicate-empty-lines)
(delete-selection-mode)
(blink-cursor-mode -1)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(set-default 'truncate-lines t)

(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8-auto-unix
              x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(setq auto-save-default nil
      auto-save-list-file-prefix nil
      make-backup-files nil
      create-lockfiles nil
      frame-resize-pixelwise t
      major-mode 'text-mode)
      ;current-language-environment "Spanish")

(setq-default indent-tabs-mode nil
              tab-width 4
              frame-title-format (list (user-login-name) "@" (system-name) " %b [%m]"))

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key "\M-p" 'backward-paragraph)
(global-set-key "\M-n" 'forward-paragraph)
(global-set-key (kbd "C-x k") 'kill-buffer-and-window)

(set-frame-parameter nil 'fullscreen 'maximized)

(defun tangle-init-async ()
  "If the current buffer is 'readme.org' the code-blocks are tangled."
  (when (string= buffer-file-name (file-truename (concat user-emacs-directory "readme.org")))
    (let ((prog-mode-hook nil))
      (async-shell-command "/usr/bin/sh -c \"/usr/bin/emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)'\""))))
(add-hook 'after-save-hook 'tangle-init-async)
#+end_src
** abbrev
#+begin_src emacs-lisp
(leaf abbrev
  :diminish abbrev-mode
  :config
  (abbrev-mode t)
  (setq abbrev-file-name (concat conf:cache-dir "abbrev.el")
        save-abbrevs 'silently
        default-abbrev-mode t
        save-abbrevs t)
  (when (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file)))
#+end_src
** bookmarks
#+begin_src emacs-lisp
(leaf bookmark
  :config
  (setq bookmark-default-file  (concat conf:cache-dir "bookmarks"))
  (when (file-exists-p bookmark-default-file)
    (bookmark-load bookmark-default-file t)))
#+end_src
** custom.el
#+begin_src emacs-lisp
(setq custom-file (concat conf:cache-dir "custom.el"))
(unless (file-exists-p custom-file)
  (with-temp-buffer
    (write-file custom-file)))
(load custom-file)
#+end_src
** dirs
#+begin_src emacs-lisp
(setq-default semanticdb-default-save-directory (concat conf:cache-dir "semanticdb/")
              url-configuration-directory (concat conf:cache-dir "url/")
              eshell-directory-name (concat conf:cache-dir "eshell/" ))
#+end_src
** history
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq savehist-file (concat conf:cache-dir "history")
      history-delete-duplicates t
      savehist-save-minibuffer-history 1
      savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
(savehist-mode t)
#+end_src
** ibuffer
#+begin_src emacs-lisp
(leaf ibuffer
  :config
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("org" (name . "^.*org$"))

                 ("web" (or (mode . web-mode)
                            (mode . php-mode)
                            (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode)
                              (mode . term-mode)
                              (mode . shell-mode)))
                 ("prog" (or (mode . python-mode)
                             (mode . nxml-mode)
                             (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
:hook (ibuffer-mode-hook . (lambda ()
                             (ibuffer-auto-mode 1)
                             (ibuffer-switch-to-saved-filter-groups "default"))))
#+end_src
** recentf
#+begin_src emacs-lisp
(leaf recentf
  :config
  (setq recentf-save-file (concat conf:cache-dir "recentf")
        recentf-exclude '("/tmp/" "/ssh:" "/sudo:" "/scp:"
                          "/scpx:" "/ssh:" "/media/data/org/"
                          "conf:cache-dir" "/media/data/mail/Maildir/"
                          "/home/arkhan/.dots/emacs/straight/")
        recentf-max-saved-items 15
        recentf-max-menu-items 15
        recentf-keep '(file-remote-p file-readable-p)
        recentf-auto-cleanup 'never)
  (recentf-mode +1))
#+end_src
** saveplace
#+begin_src emacs-lisp
(leaf saveplace
  :init (save-place-mode)
  :config
  (progn
    (setq save-place-file (concat conf:cache-dir "saveplace.el"))
    (setq-default save-place t)))
#+end_src
** semantic
#+begin_src emacs-lisp
(leaf semantic
  :require t
  :config (semantic-mode 1))
#+end_src
** tramp
#+begin_src emacs-lisp
(leaf tramp
  :require t
  :config
  (setq tramp-default-method "scp"
        tramp-encoding-shell "/bin/bash"
        tramp-persistency-file-name (concat conf:cache-dir "tramp")
        tramp-auto-save-directory (concat conf:cache-dir "tramp-autosave")
        tramp-debug-buffer nil
        tramp-verbose 10
        tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>] *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
  (tramp-set-completion-function "ssh" '((tramp-parse-sconfig "/etc/ssh_config")
                                         (tramp-parse-sconfig "~/.ssh/config"))))

(leaf counsel-tramp
  :straight t
  :bind ("C-c s" . counsel-tramp)
  :hook ((counsel-tramp-pre-command-hook . (lambda ()
                                             (projectile-mode 0)
                                             (editorconfig-mode 0)))
         (counsel-tramp-quit-hook . (lambda ()
                                      (projectile-mode 1)
                                      (editorconfig-mode 1)))))
#+end_src
** scratch
#+begin_src emacs-lisp
(leaf persistent-scratch
  :straight t
  :config
  (setq persistent-scratch-save-file (concat conf:cache-dir "scratch"))
  (persistent-scratch-setup-default))
#+end_src
* UI
** all-the-icons
#+begin_src emacs-lisp
(leaf all-the-icons :straight t)
#+end_src
** avy
#+begin_src emacs-lisp
(leaf avy
  :straight t
  :config
  (setq avy-all-windows t))
#+end_src
** cursor
#+begin_src emacs-lisp
(setq-default cursor-type '(hbar . 2))
(setq x-stretch-cursor t)

(leaf frame
  :config
  (defun set-cursor-hook (frame)
    (modify-frame-parameters
     frame (list (cons 'cursor-color "white"))))

  :hook (after-make-frame-functions . set-cursor-hook))
#+end_src
** dashboard
#+begin_src emacs-lisp
(leaf page-break-lines
  :straight t
  :diminish page-break-lines-mode
  :config (page-break-lines-mode))

(leaf dashboard
  :straight t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title (concat "GNU Emacs " emacs-version
                                              " kernel " (car (split-string (shell-command-to-string "uname -r") "-"))
                                              " x86_64 " (car (split-string (shell-command-to-string "/usr/bin/sh -c '. /etc/os-release && echo $PRETTY_NAME'") "\n")))
        dashboard-set-init-info t
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5))
        initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*"))))
#+end_src
** font
#+begin_src emacs-lisp
(leaf pcache
  :straight t
  :init
  (setq pcache-directory (let ((dir (concat conf:cache-dir "pcache/")))
                           (make-directory dir t)
                           dir)))

(leaf unicode-fonts
  :straight t
  :init (unicode-fonts-setup))

(global-font-lock-mode 1)
(set-face-attribute 'default nil :font "mononoki:pixelsize=15")
#+end_src
** imenu
#+begin_src emacs-lisp
(leaf imenu-list
  :straight t
  :bind ("M-2" . imenu-list-smart-toggle)
  :config
  (setq imenu-list-size 36
        imenu-list-position 'left
        imenu-list-focus-after-activation t
        imenu-list-after-jump-hook nil))
#+end_src
** ivy
#+begin_src emacs-lisp
(leaf ivy
  :straight
  :diminish ivy-mode
  :bind (ivy-mode-map
         ("C-'" . ivy-avy))
  :config
  (setq ivy-wrap t
        ivy-virtual-abbreviate 'full
        ivy-use-virtual-buffers t
        ivy-use-selectable-prompt t
        ivy-count-format "(%d/%d) "
        ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                (t . ivy--regex-plus))
        ivy-on-del-error-function nil
        ivy-initial-inputs-alist nil
        enable-recursive-minibuffers t)

  (add-to-list 'ivy-ignore-buffers "\\*Async Shell Command\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Messages\\*")
  (add-to-list 'ivy-ignore-buffers "\\*elfeed-log\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Help\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Compile-Log\\*")
  (add-to-list 'ivy-ignore-buffers "\\*magit-.*")
  (add-to-list 'ivy-ignore-buffers "\\magit-.*")
  (add-to-list 'ivy-ignore-buffers "\\*tide")
  (add-to-list 'ivy-ignore-buffers "\\*Flycheck.*")
  (add-to-list 'ivy-ignore-buffers "\\*lsp-.*")
  (add-to-list 'ivy-ignore-buffers "\\*git-gutter:.*")
  (with-eval-after-load "projectile"
    (setf projectile-globally-ignored-buffers ivy-ignore-buffers))

  (defun conf:ivy-format-function-arrow (cands)
    "Transform CAND-PAIRS into a string for minibuffer."
    (ivy--format-function-generic
     (lambda (str)
       (concat "-> " (ivy--add-face str 'ivy-current-match)))
     (lambda (str)
       (concat "   " str))
     cands
     "\n"))
  (setq ivy-format-function 'conf:ivy-format-function-arrow)
  (ivy-mode 1))

(leaf prescient
  :straight t
  :require t
  :config
  (setq prescient-save-file (concat conf:cache-dir "prescient.el"))
  (prescient-persist-mode))

(leaf ivy-prescient
  :straight t
  :require t
  :after ivy
  :init (ivy-prescient-mode))

(leaf ivy-posframe
  :straight t
  :after ivy
  :diminish ivy-posframe-mode
  :init
  (setq ivy-posframe-hide-minibuffer t
        ivy-fixed-height-minibuffer nil
        ivy-posframe-parameters `((min-width . ,(window-width))
                                  (min-height . ,ivy-height)
                                  (internal-border-width . 0))
        ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  :config (ivy-posframe-mode))

(leaf ivy-explorer
  :straight t
  :after ivy
  :init
  (if (display-graphic-p)
      (setq ivy-explorer-message-function #'ivy-explorer--posframe))
  (ivy-explorer-mode 1))

(leaf ivy-xref
  :straight t
  :require t
  :init (if (< emacs-major-version 27)
            (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
          (setq xref-show-definitions-function #'ivy-xref-show-defs)))

;;(setq confirm-nonexistent-file-or-buffer t)

(leaf swiper
  :straight t
  :bind* (("C-s" . swiper)
          ("C-r" . swiper)
          ("C-M-s" . swiper-all))
  :bind (read-expression-map
         ("C-r" . counsel-minibuffer-history)))

(leaf counsel
  :straight t
  :bind (("M-x" . counsel-M-x)
         ("C-c b" . counsel-imenu)
         ("C-x C-r" . counsel-rg)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("C-h b" . counsel-descbinds)
         ("M-y" . counsel-yank-pop)
         ("M-SPC" . counsel-shell-history))
  :config
  (setq counsel-find-file-at-point t
        counsel-rg-base-command "rg -uuu -S -g '!/volumes' -g '!/backups' -g '!/.git' --no-heading --line-number --color never %s"))

(leaf ivy-rich
  :straight t
  :config
  (setq ivy-rich-display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30))  ; return the candidate itself
            (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
            (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
            (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
           :predicate
           (lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
            (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))) ; return the last modified time of the file
        ivy-virtual-abbreviate 'full
        ivy-rich-path-style 'abbrev)
  (ivy-rich-mode 1))
#+end_src
** move-dup
#+begin_src emacs-lisp
(leaf move-dup
  :straight t
  :leaf-defer nil
  :diminish move-dup-mode
  :init
  (global-set-key (kbd "M-<up>") 'md-move-lines-up)
  (global-set-key (kbd "M-<down>") 'md-move-lines-down)
  (global-set-key (kbd "C-M-<up>") 'md-duplicate-up)
  (global-set-key (kbd "C-M-<down>") 'md-duplicate-down)
  (global-move-dup-mode))
#+end_src
** neotree
#+begin_src emacs-lisp
(leaf shrink-path
  :straight t
  :require t)

(leaf neotree
  :straight t
  :bind (neotree-mode-map
         ("<C-return>" . neotree-change-root)
         ("C" . neotree-change-root)
         ("c" . neotree-create-node)
         ("+" . neotree-create-node)
         ("d" . neotree-delete-node)
         ("r" . neotree-rename-node))
  :config
  (setq neo-theme 'ascii
        neo-vc-integration nil
        neo-window-width 36
        neo-create-file-auto-open t
        neo-smart-open t
        neo-show-auto-change-root t
        neo-autorefresh nil
        neo-banner-message nil
        neo-mode-line-type 'neotree
        neo-dont-be-alone t
        neo-persist-show t
        neo-show-updir-line nil
        neo-show-hidden-files nil
        neo-auto-indent-point t
        neo-hidden-regexp-list '(".DS_Store" ".idea/" ".pyc" ".tern-port"
                                 ".git/*" "node_modules/*" ".meteor" "deps"))

  (defun shrink-root-entry (node)
    "shrink-print pwd in neotree"
    (insert (propertize (concat (shrink-path-dirs node) "\n") 'face `(:inherit (,neo-root-dir-face)))))

  (advice-add #'neo-buffer--insert-root-entry :override #'shrink-root-entry))

(defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
             (projectile-project-root)))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
(global-set-key (kbd "M-1") 'neotree-project-dir-toggle)
#+end_src
** theme
#+begin_src emacs-lisp
(leaf vibrant-ink-theme
  :straight (vibrant-ink-theme :type git :host github :repo "arkhan/vibrant-ink-theme")
  :config (load-theme 'vibrant-ink t))
#+end_src
** sublimity
#+begin_src emacs-lisp
(setq-default hscroll-margin 2
              hscroll-step 1
              scroll-conservatively 1001
              scroll-margin 0
              scroll-preserve-screen-position t)

(leaf sublimity-scroll
  :straight sublimity
  :require t
  :init (sublimity-mode 1))
#+end_src
** shackle
#+begin_src emacs-lisp
(leaf shackle
  :straight t
  :init (shackle-mode)
  :config
  (setq shackle-default-size 0.4)
  (setq shackle-rules
        '(("*Calendar*" :select t :size 0.3 :align below)
          ("*Compile-Log*" :ignore t)
          ("*Completions*" :size 0.3  :align t)
          ("*format-all-errors*" :select t :size 0.1 :align below)
          ("*Help*" :select t :inhibit-window-quit t :other t)
          ("*Messages*" :select nil :inhibit-window-quit t :other t)
          ("*Process List*" :select t :size 0.3 :align below)
          ("*Proced*" :select t :size 0.3 :align below)
          ("*Python*" :select t :size 0.3 :align bellow)
          ("*Shell Command Output*" :select nil)
          ("*Warnings*" :ignore t)
          ("*el-get bootstrap*" :ignore t)
          ("*undo-tree*" :size 0.25 :align left)
          ("\\*Async Shell.*\\*" :regexp t :ignore t)
          ("\\*[Wo]*Man.*\\*" :regexp t :select t :inhibit-window-quit t :other t)
          ("\\*poporg.*\\*" :regexp t :select t :other t)
          ("\\*shell*\\*" :select t :other t)
          ("\\`\\*ivy.*?\\*\\'" :regexp t :size 0.3 :align t)
          ("edbi-dbviewer" :regexp t :select t :same t)
          ("*edbi:query-result" :regexp t :size 0.8 :align bellow)
          (occur-mode :select nil :align t)
          (pdf-view-mode :other t)
          (compilation-mode :select nil))))
#+end_src
** status line
#+begin_src emacs-lisp
(setq line-number-mode t
      column-number-mode t)

(leaf good-line
  :straight (good-line :type git :host github :repo "TatriX/good-line")
  :init (good-line-mode))

;; (leaf doom-modeline
;;   :straight t
;;   :init (doom-modeline-mode)
;;   :config
;;   (defun conf:doom-modeline--make-xpm-filter-args (args)
;;     "Force function to use `doom-modeline-height'.
;;      Instead of the calculation done in `doom-modeline-refresh-bars'.
;;      The minimum height is set to `frame-char-height' + 2."
;;     (list (car args) (cadr args) (max (+ (frame-char-height) 2) doom-modeline-height)))
;;   (advice-add 'doom-modeline--make-xpm :filter-args #'conf:doom-modeline--make-xpm-filter-args)

;;   (setq doom-modeline-height 12
;;         doom-modeline-icon nil
;;         doom-modeline-env-enable-python nil))
#+end_src
** switch-windows
#+begin_src emacs-lisp
  (leaf switch-window
    :straight t
    :bind (("C-x o" . switch-window)
           ("C-x 1" . switch-window-then-maximize)
           ("C-x 2" . switch-window-then-split-below)
           ("C-x 3" . switch-window-then-split-right)
           ("C-x 0" . switch-window-then-delete)))
#+end_src
* Prog
** company
#+begin_src emacs-lisp
(leaf company
  :straight t
  :diminish company-mode
  :commands (company-complete-common company-manual-begin company-grab-line)
  :init
  (setq company-idle-delay 0
        company-show-numbers t
        company-minimum-prefix-length 1
        company-tooltip-limit 14
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil
        company-dabbrev-code-other-buffers t
        company-tooltip-align-annotations t
        company-require-match 'never
        company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode)
        company-backends '(company-capf)
        company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))

  :config
  (setq company-backends '((company-capf
                            company-keywords
                            company-yasnippet)
                           (company-abbrev company-dabbrev)))
  (global-company-mode +1))

(leaf company-prescient
  :straight t
  :require t
  :after company
  :init (company-prescient-mode))

(leaf company-posframe
  :straight t
  :diminish company-posframe-mode
  :config (company-posframe-mode 1))

(leaf company-box
  :straight t
  :diminish company-box-mode
  :config
  (setq company-box-show-single-candidate t
        company-box-backends-colors nil
        company-box-max-candidates 50
        company-box-icons-functions '(+company-box-icons--yasnippet +company-box-icons--elisp)
        company-box-icons-alist 'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        `((Unknown       . ,(all-the-icons-material "find_in_page"             :height 0.8 :face 'all-the-icons-purple))
          (Text          . ,(all-the-icons-material "text_fields"              :height 0.8 :face 'all-the-icons-green))
          (Method        . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Function      . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Constructor   . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Field         . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Variable      . ,(all-the-icons-material "adjust"                   :height 0.8 :face 'all-the-icons-blue))
          (Class         . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          (Interface     . ,(all-the-icons-material "settings_input_component" :height 0.8 :face 'all-the-icons-red))
          (Module        . ,(all-the-icons-material "view_module"              :height 0.8 :face 'all-the-icons-red))
          (Property      . ,(all-the-icons-material "settings"                 :height 0.8 :face 'all-the-icons-red))
          (Unit          . ,(all-the-icons-material "straighten"               :height 0.8 :face 'all-the-icons-red))
          (Value         . ,(all-the-icons-material "filter_1"                 :height 0.8 :face 'all-the-icons-red))
          (Enum          . ,(all-the-icons-material "plus_one"                 :height 0.8 :face 'all-the-icons-red))
          (Keyword       . ,(all-the-icons-material "filter_center_focus"      :height 0.8 :face 'all-the-icons-red))
          (Snippet       . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-red))
          (Color         . ,(all-the-icons-material "color_lens"               :height 0.8 :face 'all-the-icons-red))
          (File          . ,(all-the-icons-material "insert_drive_file"        :height 0.8 :face 'all-the-icons-red))
          (Reference     . ,(all-the-icons-material "collections_bookmark"     :height 0.8 :face 'all-the-icons-red))
          (Folder        . ,(all-the-icons-material "folder"                   :height 0.8 :face 'all-the-icons-red))
          (EnumMember    . ,(all-the-icons-material "people"                   :height 0.8 :face 'all-the-icons-red))
          (Constant      . ,(all-the-icons-material "pause_circle_filled"      :height 0.8 :face 'all-the-icons-red))
          (Struct        . ,(all-the-icons-material "streetview"               :height 0.8 :face 'all-the-icons-red))
          (Event         . ,(all-the-icons-material "event"                    :height 0.8 :face 'all-the-icons-red))
          (Operator      . ,(all-the-icons-material "control_point"            :height 0.8 :face 'all-the-icons-red))
          (TypeParameter . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          ;; (Template   . ,(company-box-icons-image "Template.png"))))
          (Yasnippet     . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-green))
          (ElispFunction . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (ElispVariable . ,(all-the-icons-material "check_circle"             :height 0.8 :face 'all-the-icons-blue))
          (ElispFeature  . ,(all-the-icons-material "stars"                    :height 0.8 :face 'all-the-icons-orange))
          (ElispFace     . ,(all-the-icons-material "format_paint"             :height 0.8 :face 'all-the-icons-pink))))
  (defun +company-box-icons--yasnippet (candidate)
    (when (get-text-property 0 'yas-annotation candidate)
      'Yasnippet))

  (defun +company-box-icons--elisp (candidate)
    (when (derived-mode-p 'emacs-lisp-mode)
      (let ((sym (intern candidate)))
        (cond ((fboundp sym)  'ElispFunction)
              ((boundp sym)   'ElispVariable)
              ((featurep sym) 'ElispFeature)
              ((facep sym) 'ElispFace)))))
  :hook (company-mode-hook . company-box-mode))
#+end_src
** csv
#+begin_src emacs-lisp
(leaf csv-mode
  :leaf-defer nil
  :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
  :config (setq csv-separators '("," ";" "|" " ")))
#+end_src
** editorconfig
#+begin_src emacs-lisp
(leaf editorconfig
  :straight t
  :leaf-defer nil
  :diminish ""
  :config (editorconfig-mode))
#+end_src
** eldoc
#+begin_src emacs-lisp
(leaf eldoc
  :diminish eldoc-mode)
#+end_src
** empty buffer
#+begin_src emacs-lisp
(defun empty-buffer? ()
  (= (buffer-end 1) (buffer-end -1)))
#+end_src
** flycheck
#+begin_src emacs-lisp
(leaf flycheck
  :straight t
  :leaf-defer nil
  :bind (("C-c e n" . flycheck-next-error)
         ("C-c e p" . flycheck-previous-error))
  :init
  (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b11111111
            #b11111111
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))
  (flycheck-define-error-level 'error
    :severity 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-error)
  (flycheck-define-error-level 'warning
    :severity 1
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-warning)
  (flycheck-define-error-level 'info
    :severity 0
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-info)
  (setq flycheck-indication-mode 'right-fringe)
:hook (after-init . global-flycheck-mode))
#+end_src
** format-all
#+begin_src emacs-lisp
(leaf format-all
  :straight t
  :bind (prog-mode-map
         ("<M-f8>" . format-all-buffer)))
#+end_src
** highlight-indent-guides
#+begin_src emacs-lisp
(leaf highlight-indent-guides
  :straight t
  :diminish highlight-indent-guides-mode
  :config (setq highlight-indent-guides-method 'character
                highlight-indent-guides-responsive 'stack
                highlight-indent-guides-auto-odd-face-perc 15
                highlight-indent-guides-auto-even-face-perc 15
                highlight-indent-guides-auto-character-face-perc 20)
  :hook (prog-mode-hook . highlight-indent-guides-mode))
#+end_src
** jinja
#+begin_src emacs-lisp
(leaf jinja2-mode :straight t)
#+end_src
** lsp
#+begin_src emacs-lisp
(leaf lsp
  :straight lsp-mode
  :commands (lsp lsp-deferred)
  :require t
  :config (require 'lsp-clients)
  :init
  (setq lsp-eldoc-render-all nil
        lsp-print-io nil
        lsp-inhibit-message t
        lsp-message-project-root-warning t
        lsp-auto-guess-root t
        lsp-prefer-flymake nil
        lsp-session-file (concat conf:cache-dir "lsp-session"))
  :hook (lsp-after-open-hook . lsp-enable-imenu))

;; ref: https://gitlab.com/shackra/emacs/commit/b0df30fe744e4483a08731e6a9f6482ab408124c
(defvar-local conf:lsp-on-change-exist nil
  "indica si la funci√≥n `lsp-on-change' estaba insertada en `after-change-functions'")

(defun conf:lsp-on-change-modify-hook ()
  "Remueve o agrega `lsp-on-change' de `after-change-functions'"
  (if (not conf:lsp-on-change-exist)
      ;; quita la funci√≥n, solamente si estaba insertada desde un principio
      (when (memq 'lsp-on-change after-change-functions)
        (setq conf:lsp-on-change-exist t)
        (remove-hook 'after-change-functions 'lsp-on-change t))
    ;; agrega la funci√≥n
    (add-hook 'after-change-functions #'lsp-on-change nil t)
    (setq conf:lsp-on-change-exist nil)))

(leaf lsp-ui
  :straight t
  :after lsp
  :commands lsp-ui-mode
  :init
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-ignore-duplicate t
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-enable nil)
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  :hook (lsp-mode-hook . lsp-ui-mode))

(leaf company-lsp
  :straight t
  :leaf-defer nil
  :commands company-lsp
  :config
  (setq company-lsp-async t)
  (push '(company-lsp :with company-yasnippet) company-backends))
#+end_src
** makefile
#+begin_src emacs-lisp
(leaf makefile-runner
  :straight (makefile-runner :type git :host github :repo "danamlund/emacs-makefile-runner")
  :bind ("<C-f11>" . makefile-runner))
#+end_src
** multiple-cursors
#+begin_src emacs-lisp
(leaf multiple-cursors
  :straight t
  :leaf-defer nil)
#+end_src
** parents
#+begin_src emacs-lisp
(electric-pair-mode 1)

(leaf paren
  :straight t
  :init (show-paren-mode)
  :config
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "#def")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

(leaf smartparens-config
  :straight smartparens
  :commands (smartparens-mode smartparens-strict-mode)
  :bind (smartparens-strict-mode-map
         ("C-}" . sp-forward-slurp-sexp)
         ("M-s" . sp-backward-unwrap-sexp)
         ("C-c [" . sp-select-next-thing)
         ("C-c ]" . sp-select-next-thing-exchange)))

(leaf rainbow-delimiters
  :straight t
  :hook (prog-mode-hook . rainbow-delimiters-mode))
#+end_src
** plantuml
#+begin_src emacs-lisp
(leaf plantuml-mode
  :straight t
  :config (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar"))

(leaf flycheck-plantuml
  :straight t
  :after flycheck
  :config (flycheck-plantuml-setup))
#+end_src
** prog-mode
#+begin_src emacs-lisp
(leaf prog-mode
  :config
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (global-prettify-symbols-mode t)
  (add-hook 'prog-mode-hook
            (lambda ()
              (mapc (lambda (pair) (push pair prettify-symbols-alist))
                    '(("in" . ?\u2208)
                      ("IN" . ?\u2208)
                      ("not in" . ?\u2209)
                      ("NOT IN" . ?\u2209)
                      ("not" . ?\u00AC)
                      ("NOT" . ?\u00AC)
                      ("==" . ?\u2261)
                      ("!=" . ?\u2260)
                      (">=" . ?\u2265)
                      ("<=" . ?\u2264)))))
  (defun indicate-buffer-boundaries-left ()
    (setq indicate-buffer-boundaries 'left))
  (add-hook 'prog-mode-hook #'indicate-buffer-boundaries-left)
  (add-hook 'prog-common-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("\\<\\(FIX\\|FIXME\\|TODO\\|BUG\\|HACK\\):" 1 font-lock-warning-face t))))))
#+end_src
** projectile
#+begin_src emacs-lisp
(leaf projectile
  :straight t
  :diminish projectile-mode
  :config
  (setq projectile-known-projects-file (concat conf:cache-dir "projectile-bookmarks.eld")
        projectile-cache-file (concat conf:cache-dir "projectile.cache")
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-indexing-method 'alien
        projectile-enable-caching t
        projectile-completion-system 'ivy)
  (projectile-mode))

(leaf counsel-projectile
  :straight t
  :bind* ("C-x b" . conf:switch-to-project-buffer-if-in-project)
  :bind (("C-x r R" . counsel-projectile-rg)
         ("<C-tab>" . counsel-projectile-switch-project))
  :config
  (defun conf:switch-to-project-buffer-if-in-project (arg)
    "Custom switch to buffer.
    With universal argument ARG or when not in project, rely on
    `ivy-switch-buffer'.
    Otherwise, use `counsel-projectile-switch-to-buffer'."
    (interactive "P")
    (if (or arg
            (not (projectile-project-p)))
        (ivy-switch-buffer)
      (counsel-projectile-switch-to-buffer)))
  :hook ((text-mode-hook . counsel-projectile-mode)
         (prog-mode-hook . counsel-projectile-mode)))
#+end_src
** polymode
#+begin_src emacs-lisp
(leaf polymode
  :straight t
  :config
  (setq polymode-prefix-key (kbd "C-c n"))
  (define-hostmode poly-python-hostmode :mode 'python-mode)

  (define-innermode poly-sql-expr-python-innermode
    :mode 'sql-mode
    :head-matcher (rx "r" (= 3 (char "\"'")) (* (any space)))
    :tail-matcher (rx (= 3 (char "\"'")))
    :head-mode 'host
    :tail-mode 'host)

  (defun poly-python-sql-eval-chunk (beg end msg)
    "Calls out to `sql-send-region' with the polymode chunk region"
    (sql-send-region beg end))

  (define-polymode poly-python-sql-mode
    :hostmode 'poly-python-hostmode
    :innermodes '(poly-sql-expr-python-innermode)
    (setq polymode-eval-region-function #'poly-python-sql-eval-chunk)
    (define-key poly-python-sql-mode-map (kbd "C-c C-c") 'polymode-eval-chunk))

  ;; Bug? Fix polymode kill chunk so it works.
  (defun polymode-kill-chunk ()
    "Kill current chunk."
    (interactive)
    (pcase (pm-innermost-span)
      (`(,(or `nil `host) ,beg ,end ,_) (delete-region beg end))
      (`(body ,beg ,_ ,_)
       (goto-char beg)
       (pm--kill-span '(body))
       ;; (pm--kill-span '(head tail))
       ;; (pm--kill-span '(head tail))
       )
      (`(tail ,beg ,end ,_)
       (if (eq beg (point-min))
           (delete-region beg end)
         (goto-char (1- beg))
         (polymode-kill-chunk)))
      (`(head ,_ ,end ,_)
       (goto-char end)
       (polymode-kill-chunk))
      (_ (error "Canoot find chunk to kill"))))

  :hook (python-mode-hook . poly-python-sql-mode))
#+end_src
** python
*** python-template
#+begin_src emacs-lisp
(setq ansi-color-for-comint-mode t)
(defun python-template ()
  (interactive)
  (insert "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n"))

(add-hook 'python-mode-hook
          '(lambda ()
             (when (empty-buffer?) (python-template))))

#+end_src
*** lsp-python
#+begin_src emacs-lisp
(leaf lsp-python-ms
  :straight (lsp-python-ms :type git :host github :repo "andrew-christianson/lsp-python-ms")
  :require t
  :init (setq lsp-python-ms-dir (concat conf:cache-dir "mspyls/")))

(leaf python-mode
  :straight t
  :hook (python-mode-hook . lsp-deferred))
#+end_src
*** pyenv
#+begin_src emacs-lisp
(leaf pyenv-mode
  :straight t
  ;; :config
  ;; (defun pyenv-venv-wrapper-act (&optional ARG PRED)
  ;;   (setenv "VIRTUAL_ENV" (shell-command-to-string "_pyenv_virtualenv_hook; echo -n $VIRTUAL_ENV")))
  ;; (advice-add 'pyenv-mode-set :after 'pyenv-venv-wrapper-act)

  ;; (defun pyenv-venv-wrapper-deact (&optional ARG PRED)
  ;;   (setenv "VIRTUAL_ENV"))
  ;; (advice-add 'pyenv-mode-unset :after 'pyenv-venv-wrapper-deact)
  :init (pyenv-mode))

(leaf pyenv-mode-auto
  :straight t
  :require t)
#+end_src
*** pep8
#+begin_src emacs-lisp
(leaf blacken
  :straight t
  :diminish blacken-mode
  :config (setq blacken-fast-unsafe t)
  :hook (python-mode-hook . blacken-mode))

(leaf py-isort
  :straight t
  :config (setq py-isort-options '("--lines=100"))
  :hook (before-save-hook . py-isort-before-save))
#+end_src
*** stuff
#+begin_src emacs-lisp
(leaf pyimport :straight t :require t)
(leaf pip-requirements :straight t)
#+end_src
** rainbow
#+begin_src emacs-lisp
(leaf rainbow-mode
  :straight t
  :diminish rainbow-mode
  :hook ((prog-mode-hook . rainbow-mode)
          (conf-mode-hook . rainbow-mode)
          (xrdb-mode-hook . rainbow-mode)))
#+end_src
** rest
#+begin_src emacs-lisp
(leaf restclient  :straight t)

(leaf company-restclient
  :straight t
  :after restclient
  :config (add-to-list 'company-backends 'company-restclient))

(leaf ob-restclient
  :straight t
  :commands (org-babel-execute:restclient))
#+end_src
** sql
#+begin_src emacs-lisp
(leaf edbi-database-url
  :straight t)

(leaf edbi-minor-mode
  :straight t
  :hook (sql-mode-hook . edbi-minor-mode))

(leaf company-edbi
  :straight t
  :init
  (defun cfg:edbi-mode-hook()
    (add-to-list 'company-backends 'company-edbi))
  :hook (edbi:sql-mode-hook . cfg:edbi-mode-hook))

(leaf sqlup-mode
  :straight t
  :bind ("C-c u" . sqlup-capitalize-keywords-in-region)
  :hook ((sql-mode-hook . sqlup-mode)
         (edbi:sql-mode-hook . sqlup-mode)
         (sql-interactive-mode-hook . sqlup-mode)))

(leaf sql-indent
  :straight t
  :after sql
  :bind (sql-mode-map
         ("C-c \\" . sql-indent-buffer))
  :hook (sql-mode-hook . sqlind-minor-mode))
#+end_src
** xml
#+begin_src emacs-lisp
  (defun nxml-template ()
    (interactive)
    (insert "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n"))

  (add-hook 'nxml-mode-hook
            '(lambda () (when (empty-buffer?) (nxml-template))))

  (leaf nxml-mode
    :mode (("\\.plist\\'" . nxml-mode)
           ("\\.rss\\'"   . nxml-mode)
           ("\\.svg\\'"   . nxml-mode)
           ("\\.xml\\'"   . nxml-mode)
           ("\\.xsd\\'"   . nxml-mode)
           ("\\.xslt\\'"  . nxml-mode)
           ("\\.pom$"     . nxml-mode))
    :bind (nxml-mode-map
           ("C-x f" . pretty-print-xml-buffer))
    :config
    (setq nxml-slash-auto-complete-flag t
                   nxml-auto-insert-xml-declaration-flag t)
    (add-to-list 'magic-mode-alist '("<\\?xml" . nxml-mode))
    (mapc
     (lambda (pair)
       (if (or (eq (cdr pair) 'xml-mode)
               (eq (cdr pair) 'sgml-mode))
           (setcdr pair 'nxml-mode)))
     auto-mode-alist)

    ;; https://gist.github.com/DinoChiesa/5489021
    (defun pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
      http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
      this. The function inserts linebreaks to separate tags that have
      nothing but whitespace between them. It then indents the markup
      by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        ;; split <foo><bar> or </foo><bar>, but not <foo></foo>
        (goto-char begin)
        (while (search-forward-regexp ">[ \t]*<[^/]" end t)
          (backward-char 2) (insert "\n") (incf end))
        ;; split <foo/></foo> and </foo></foo>
        (goto-char begin)
        (while (search-forward-regexp "<.*?/.*?>[ \t]*<" end t)
          (backward-char) (insert "\n") (incf end))
        ;; put xml namespace decls on newline
        (goto-char begin)
        (while (search-forward-regexp "\\(<\\([a-zA-Z][-:A-Za-z0-9]*\\)\\|['\"]\\) \\(xmlns[=:]\\)" end t)
          (goto-char (match-end 0))
          (backward-char 6) (insert "\n") (incf end))
        (indent-region begin end nil)
        (normal-mode))
      (message "All indented!"))


    (defun pretty-print-xml-buffer ()
      "pretty print the XML in a buffer."
      (interactive)
      (pretty-print-xml-region (point-min) (point-max))))
#+end_src
** yaml
#+begin_src emacs-lisp
(leaf yaml-mode :straight t)
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (leaf yasnippet
    :straight t
    :diminish yas-minor-mode
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode))

  (leaf yasnippet-snippets :straight t)

  (leaf org-sync-snippets
    :straight t
    :init
    (setq org-sync-snippets-org-snippets-file "~/.emacs.d/snippets/snippets.org")
    (add-hook 'yas-after-reload-hook 'org-sync-snippets-org-to-snippets))
#+end_src
* Tools
** alert
#+begin_src emacs-lisp
(leaf alert
  :straight t
  :require t
  :init
  (if (eq system-type 'windows-nt)
      (setq alert-default-style 'message)
    (setq alert-default-style 'libnotify)))
#+end_src
** anzu
#+begin_src emacs-lisp
(leaf anzu
  :straight t
  :bind (("M-%" . anzu-query-replace)
	     ("C-M-%" . anzu-query-replace-regexp))
  :config
  (set-face-attribute 'anzu-mode-line nil :foreground "yellow" :weight 'bold)

  (defun cfg:anzu-update-func (here total)
	(when anzu--state
	  (let ((status (cl-case anzu--state
			          (search (format "[%d/%d Seek]" here total))
			          (replace-query (format "(%d Replaces)" total))
			          (replace (format "[%d/%d Replaces]" here total)))))
	    (propertize status 'face 'anzu-mode-line))))

  (setq anzu-cons-mode-line-p nil
	    anzu-mode-lighter ""
	    anzu-deactivate-region t
	    anzu-search-threshold 1000
	    anzu-replace-threshold 50
	    anzu-replace-to-string-separator " => "
	    anzu-mode-line-update-function #'cfg:anzu-update-func)

  (add-to-list 'minor-mode-alist
		       '(:eval (when anzu--state
			             (concat " " (anzu--update-mode-line)))))
  (global-anzu-mode +1))
#+end_src
** bughunter
#+begin_src emacs-lisp
(leaf bug-hunter
  :straight t
  :commands (bug-hunter-file bug-hunter-init-file))
#+end_src
** autorevert
#+begin_src emacs-lisp
(leaf autorever
  :diminish auto-revert-mode
  :config (setq auto-revert-remote-files t
                auto-revert-interval 1))
#+end_src
** caldav
#+begin_src emacs-lisp
(leaf org-caldav
  :straight t
  :bind ("<f6>" . org-caldav-sync)
  :config
  (setq org-icalendar-alarm-time 30
        org-icalendar-categories '(all-tags category todo-state)
        org-icalendar-include-todo t
        org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
        org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
        org-icalendar-with-timestamps t
        org-icalender-sync-todo t
        org-icalendar-timezone "America/Guayaquil")

  (setq org-caldav-calendars '((:calendar-id "arkhan/work"
                                             :files ("~/org/work.org")
                                             :inbox "~/org/inbox.org")
                               (:calendar-id "arkhan/stuff"
                                             :files ("~/org/stuff.org")
                                             :inbox "~/org/inbox.org"))
        org-caldav-files org-agenda-files
        org-caldav-save-directory (concat conf:cache-dir "dav")
        org-caldav-show-sync-results nil
        org-caldav-url "https://cloud.disroot.org/remote.php/dav/calendars")
  (make-directory org-caldav-save-directory :parents)
  (setq org-caldav-backup-file (concat org-caldav-save-directory "caldav-backup.org")))


(leaf calfw
  :straight t
  :bind ("C-c f" . cfw:open-org-calendar)
  :config
  (setq cfw:org-overwrite-default-keybinding t
        cfw:display-calendar-holidays nil
        calendar-week-start-day 1))

(leaf calfw-org :straight t)
#+end_src
** comment-dwim-2
#+begin_src emacs-lisp
(leaf comment-dwim-2
  :straight t
  :leaf-defer nil
  :bind* ("M-;" . comment-dwim-2))
#+end_src
** docker
#+begin_src emacs-lisp
(leaf docker :straight t)

(leaf dockerfile-mode
  :straight t
  :mode "Dockerfile\\'")

(leaf docker-compose-mode
  :straight t
  :mode ("docker-compose.*\.yml\\'" . docker-compose-mode))
#+end_src
** dumb-jump
#+begin_src emacs-lisp
(leaf dumb-jump
  :straight t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy))
#+end_src
** flyspell
#+begin_src emacs-lisp
(leaf flyspell
  :require t
  :bind (("C-c t s" . flyspell-mode)
         ("C-c l b" . flyspell-buffer)
         ("M-i" . switch-dictionary)
         (flyspell-mode-map
          ("C-\"" . flyspell-add-word-to-dict)
          ("\M-\t" . nil)
          ([down-mouse-2] . nil)
          ([mouse-2] . nil)))
  :init
  (dolist (hook '(TeX-mode-hook LaTeX-mode-hook text-mode-hook message-mode-hook markdown-mode-hook org-mode-hook))
    (add-hook hook 'turn-on-flyspell))
  :config
  (setq flyspell-use-meta-tab nil
        flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil)

  (setq-default ispell-program-name "hunspell"
                ispell-really-hunspell t
                ispell-check-comments t
                ispell-local-dictionary "en_US"
                ispell-local-dictionary-alist
                '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
                  ("es_EC" "[[:alpha:]]" "[^[:alpha:]]" "[√±]" nil ("-d" "es_EC") nil utf-8)))

  (defun switch-dictionary ()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "en_US") "es_EC" "en_US")))
      (ispell-change-dictionary change)
      (setq ispell-alternate-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))

  (defun turn-on-spell-check ()
    (flyspell-mode 1))

  (defun flyspell-add-word-to-dict ()
    "Add the word at the current location to the private dictionary
       without question."
    (interactive)
    ;; use the correct dictionary
    (flyspell-accept-buffer-local-defs)
    (setq opoint (point-marker))
    (let ((cursor-location (point))
          (word (flyspell-get-word nil)))
      (if (consp word)
          (let ((start (car (cdr word)))
                (end (car (cdr (cdr word))))
                (word (car word)))
            ;; The word is incorrect, we have to propose a replacement.
            (flyspell-do-correct 'save nil word cursor-location start end opoint)))
      (ispell-pdict-save t)))

  :hook (prog-mode-hook . flyspell-prog-mode))

(leaf flyspell-correct
  :straight t
  :bind ("C-M-'" . flyspell-correct-wrapper))

(leaf flyspell-correct-popup
  :straight t
  :require t
  :init (setq flyspell-correct-interface #'flyspell-correct-popup
              flyspell-correct-auto-mode-interface #'flyspell-correct-popup))
#+end_src
** frog
#+begin_src emacs-lisp
(leaf frog-jump-buffer
  :straight t
  :bind ("C-x C-b" . frog-jump-buffer))
#+end_src
** gif-screencast
#+begin_src emacs-lisp
(leaf gif-screencast
  :straight t
  :bind (("<f8>" . gif-screencast)
         (gif-screencast-mode-map
          ("<f8>" . gif-screencast-toggle-pause)
          ("<f9>" . gif-screencast-stop))))
#+end_src
** git
#+begin_src emacs-lisp
(setq vc-follows-symlinks t
      auto-revert-check-vc-info t
      find-file-visit-truename t)

(leaf transient
  :straight t
  :config (setq transient-history-file (concat conf:cache-dir "transient.el")))

(leaf magit
  :straight t
  :bind* (("C-x g c" . magit-commit-create)
          ("C-x g e" . magit-ediff-resolve)
          ("C-x g g" . magit-grep)
          ("C-x g l" . magit-file-log)
          ("C-x g p" . magit-push-other)
          ("C-x g r" . magit-rebase-interactive)
          ("C-x g s" . magit-status)
          ("C-x g u" . magit-pull-other)
          ("C-x g x" . magit-checkout))
  :init
  (progn
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defadvice git-commit-commit (after delete-window activate)
      (delete-window))
    (defadvice git-commit-abort (after delete-window activate)
      (delete-window))
    (defun magit-commit-mode-init ()
      (when (looking-at "\n")
        (open-line 1))))
  :config
  (progn
    (defadvice magit-quit-window (around magit-restore-screen activate)
      (let ((current-mode major-mode))
        ad-do-it
        (when (eq 'magit-status-mode current-mode)
          (jump-to-register :magit-fullscreen))))
    (defun magit-maybe-commit (&optional show-options)
      "Runs magit-commit unless prefix is passed"
      (interactive "P")
      (if show-options
          (magit-key-mode-popup-committing)
        (magit-commit-create)))
    (define-key magit-mode-map "c" 'magit-maybe-commit)

    (setq magit-git-executable "tg"
          magit-completing-read-function 'ivy-completing-read
          magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
          magit-status-buffer-switch-function 'switch-to-buffer
          magit-diff-refine-hunk t
          magit-rewrite-inclusive 'ask
          magit-process-find-password-functions '(magit-process-password-auth-source)
          magit-save-some-buffers t
          magit-process-popup-time 10
          magit-set-upstream-on-push 'askifnotset
          magit-refs-show-commit-count 'all
          magit-log-buffer-file-locket t)))

(leaf magit-gitflow
  :straight t
  :require t
  :hook (magit-mode-hook . turn-on-magit-gitflow))

(leaf git-gutter
  :straight t
  :leaf-defer nil
  :bind (("C-x C-g" . git-gutter)
         ("C-x v =" . git-gutter:popup-hunk)
         ("C-x p" . git-gutter:previous-hunk)
         ("C-x n" . git-gutter:next-hunk)
         ("C-x v s" . git-gutter:stage-hunk)
         ("C-x v r" . git-gutter:revert-hunk)
         ("C-x v SPC" . git-gutter:mark-hunk))
  :config
  (if (display-graphic-p)
      (leaf git-gutter-fringe
        :straight t
        :require t))
  (global-git-gutter-mode t)
  (setq indicate-empty-lines nil)
  (setq git-gutter:lighter ""
        git-gutter:handled-backends '(git hg bzr svn))
  (set-face-foreground 'git-gutter:modified "purple")
  (set-face-foreground 'git-gutter:added "green")
  (set-face-foreground 'git-gutter:deleted "red"))

(leaf gitconfig-mode
  :straight t
  :leaf-defer nil
  :mode ("/\\.?git/?config$"
         "/\\.gitmodules$")
  :hook (gitconfig-mode-hook . flyspell-mode))

(leaf gitignore-mode
  :straight t
  :leaf-defer nil
  :mode ("/\\.gitignore$"
         "/\\.git/info/exclude$"
         "/git/ignore$"))

(leaf gitattributes-mode
  :straight t
  :leaf-defer nil)

(leaf git-timemachine
  :straight t
  :leaf-defer nil
  :commands git-timemachine
  :bind (git-timemachine-mode
         ("c" . git-timemachine-show-current-revision)
         ("b" . git-timemachine-switch-branch)))
#+end_src
** i3wm
#+begin_src emacs-lisp
(leaf i3wm-config-mode
  :straight (i3wm-config-mode :type git :host github :repo "Alexander-Miller/i3wm-Config-Mode"))
#+end_src
** logview
#+begin_src emacs-lisp
(leaf logview
  :straight t
  :hook (logview-mode-hook . auto-revert-mode))
#+end_src
** mu4e
#+begin_src emacs-lisp
(leaf link-hint
  :straight t
  :bind (("C-c l o" . link-hint-open-link)
         ("C-c l c" . link-hint-copy-link)))

(leaf mu4e
  :if (executable-find "mu")
  :bind ("<f1>" . mu4e)
  :preface
  (defadvice mu4e (before mu4e-start activate)
    "Antes de ejecutar `mu4e' borramos todas las ventanas"
    (when (> 1 (count-windows))
      (window-configuration-to-register :mu4e-fullscreen)
      (delete-other-windows)))

  (defadvice mu4e-quit (after mu4e-close-and-push activate)
    "Despues de salir de mu4e ejecutamos un script para subir los cambios al buzon de correo y para tambi√©n restaurar la disposici√≥n de ventanas"
    (start-process "pushmail" "*pushmail-mbsync*" "mbsync" "-a" "--push")
    (when (get-register :mu4e-fullscreen)
      (jump-to-register :mu4e-fullscreen)))
  :init
  (require 'mu4e-contrib)
  (setq mail-user-agent 'mu4e-user-agent
        message-citation-line-format "\nEl %A %d de %B del %Y a las %H%M horas, %N escribi√≥:\n"
        message-citation-line-function 'message-insert-formatted-citation-line
        message-cite-reply-position 'below
        message-kill-buffer-on-exit t
        message-send-mail-function 'message-send-mail-with-sendmail
        mu4e-attachment-dir  "~/Descargas"
        mu4e-auto-retrieve-keys t
        mu4e-compose-context-policy 'ask
        mu4e-compose-dont-reply-to-self t
        mu4e-compose-keep-self-cc nil
        mu4e-context-policy 'pick-first
        mu4e-headers-date-format "%Y-%m-%d %H:%M"
        mu4e-headers-include-related t
        mu4e-headers-auto-update nil
        mu4e-headers-leave-behavior 'ignore
        mu4e-headers-visible-lines 8
        mu4e-headers-fields '((:date . 25)
                              (:flags . 6)
                              (:from . 30)
                              (:subject . nil))
        mu4e-html2text-command "w3m -dump -T text/html -cols 72 -o display_link_number=true -o auto_image=false -o display_image=true -o ignore_null_img_alt=true"
        mu4e-maildir "~/.mail"
        mu4e-view-show-images t
        mu4e-view-show-addresses t
        mu4e-view-prefer-html t
        sendmail-program "msmtp"
        mu4e-get-mail-command "mbsync -aV")

  (defun mu4e-message-maildir-matches (msg rx)
    (when rx
      (if (listp rx)
          ;; If rx is a list, try each one for a match
          (or (mu4e-message-maildir-matches msg (car rx))
              (mu4e-message-maildir-matches msg (cdr rx)))
        ;; Not a list, check rx
        (string-match rx (mu4e-message-field msg :maildir)))))

  (defun choose-msmtp-account ()
    (if (message-mail-p)
        (save-excursion
          (let*
              ((from (save-restriction
                       (message-narrow-to-headers)
                       (message-fetch-field "from")))
               (account
                (cond
                 ((string-match "arkhan@disroot.org" from) "Personal")
                 ((string-match "edison@disroot.org" from) "Work")
                 ((string-match "edison@saslibre.net" from) "SasLibre")
                 ((string-match "arkhan.xxx@gmail.com" from) "Gmail"))))
            (setq message-sendmail-extra-arguments (list '"-a" account))))))

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Personal"
             :enter-func (lambda () (mu4e-message "Switch to the Personal context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/Personal")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "arkhan@disroot.org")
                     (user-full-name        . "Edison Ib√°√±ez")
                     (mu4e-sent-folder      . "/Personal/Sent")
                     (mu4e-drafts-folder    . "/Personal/Drafts")
                     (mu4e-trash-folder     . "/Personal/Trash")
                     (mu4e-refile-folder    . "/Personal/Archive")))
           ,(make-mu4e-context
             :name "Work"
             :enter-func (lambda () (mu4e-message "Switch to the Work context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/Work")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "edison@disroot.org")
                     (user-full-name        . "Edison Ib√°√±ez")
                     (mu4e-sent-folder      . "/Work/Sent")
                     (mu4e-drafts-folder    . "/Work/Drafts")
                     (mu4e-trash-folder     . "/Work/Trash")
                     (mu4e-refile-folder    . "/Work/Archive")))
           ,(make-mu4e-context
             :name "SasLibre"
             :enter-func (lambda () (mu4e-message "Switch to the SasLibre context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/SasLibre")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "edison@saslibre.net")
                     (user-full-name        . "Edison Ib√°√±ez")
                     (mu4e-sent-folder      . "/SasLibre/Sent")
                     (mu4e-drafts-folder    . "/SasLibre/Drafts")
                     (mu4e-trash-folder     . "/SasLibre/Trash")
                     (mu4e-refile-folder    . "/SasLibre/Archive")))
           ,(make-mu4e-context
             :name "Gmail"
             :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/Gmail")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "arkhan.xxx@gmail.com")
                     (user-full-name        . "Edison Ib√°√±ez")
                     (mu4e-sent-folder      . "/Gmail/Sent Mail")
                     (mu4e-trash-folder     . "/Gmail/Trash")
                     (mu4e-refile-folder    . "/Gmail/All Mail")
                     (mu4e-drafts-folder    . "/Gmail/Drafts")))))

  (run-at-time nil (* 60 5) 'mu4e-update-mail-and-index t)
  :hook ((mu4e-compose-mode-hook . flyspell-mode)
         (message-send-mail-hook . choose-msmtp-account)))

(leaf mu4e-alert
  :if (executable-find "mu")
  :straight t
  :init
  (setq mu4e-compose-forward-as-attachment t
        mu4e-compose-crypto-reply-encrypted-policy 'sign-and-encrypt
        mu4e-compose-crypto-reply-plain-policy 'sign
        mu4e-index-update-in-background t
        mu4e-alert-email-notification-types '(subjects))
  :config
  (defun conf:refresh-mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display))
  (run-with-timer 0 60 'conf:refresh-mu4e-alert-mode-line)
  (mu4e-alert-set-default-style 'libnotify)
  :hook ((after-init-hook . mu4e-alert-enable-notifications)
         (after-init-hook . mu4e-alert-enable-mode-line-display)))

(leaf mu4e-maildirs-extension
  :if (executable-find "mu")
  :straight t
  :after mu4e
  :config (mu4e-maildirs-extension))
#+end_src
** nginx
#+begin_src emacs-lisp
(leaf nginx-mode
  :straight t
  :mode ("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src
** orgmode
 #+begin_src emacs-lisp
(leaf org
  :straight org-plus-contrib
  :leaf-defer nil
  :bind (("C-x a" . org-agenda-list)
         ("C-x c" . org-capture))
  :config
  (progn
    (add-hook 'org-mode-hook
              (lambda ()
                (turn-on-auto-fill)
                (org-indent-mode)
                (switch-dictionary)))

    ;; set the modules enabled by default
    (setq org-modules '(org-bbdb org-bibtex org-docview org-mhe
                                 org-rmail org-crypt org-protocol org-id
                                 org-info org-habit org-irc org-annotate-file
                                 org-eval org-expiry org-tempo org-panel org-toc ox-md))

    ;; set default directories
    (setq org-id-locations-file (concat conf:cache-dir "org-id.el")
          org-directory "~/org"
          org-default-notes-file (concat org-directory "/notes.org"))

    ;; set the archive
    (setq org-archive-location (concat org-directory "/archive.org::datetree/** Archived"))

    ;; highlight code blocks syntax
    (setq org-src-fontify-natively t
          org-src-window-setup 'current-window
          org-src-strip-leading-and-trailing-blank-lines t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t)

    ;; more sane emphasis regex to export to HTML as substitute of Markdown
    ;;(org-set-emph-re 'org-emphasis-regexp-components
    ;;                 '(" \t({"
	;;		"- \t.,:!?;)}[:multibyte:]"
	;;		" \t\r\n,"
	;;		"."
	;;		1))

    ;; highlight code blocks syntax in PDF export
    ;; Include the latex-exporter
    (leaf ox-latex :require t)
    (setq org-latex-packages-alist nil
          org-latex-default-packages-alist nil
          org-latex-hyperref-template nil)
    ;; Tell the latex export to use the minted package for source
    ;; code coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex
    ;; execute external programs.
    (setq org-latex-pdf-process '("~/.bin/ctex %f"))

    ;; tasks management
    (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
    (setq org-log-done t
          org-clock-idle-time nil
          org-todo-keywords (quote
                             ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                              (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)" "PHONE" "MEETING"))))

    ;; agenda & diary
    (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
    (setq org-agenda-include-diary nil
          org-agenda-tags-todo-honor-ignore-options t
          org-agenda-start-on-weekday nil
          org-agenda-start-day "-1d"
          org-agenda-span 7
          show-week-agenda-p t
          org-agenda-timegrid-use-ampm 1
          org-agenda-inhibit-startup t
          org-agenda-files (quote
                            ("~/org/work.org"
                             "~/org/stuff.org")))

    (setq org-agenda-custom-commands
          '(("Q" . "Custom queries") ;; gives label to "Q"
            ("Qa" "Archive search" search "" ((org-agenda-files (file-expand-wildcards "~/org/archive.org"))))
            ("n" todo "NEXT")
            ("w" todo "WAITING")
            ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))

    ;; date insertion configuration
    (setq org-expiry-created-property-name "CREATED"
          org-expiry-inactive-timestamps t
          org-todo-state-tags-triggers (quote
                                        (("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING" ("WAITING" . t))
                                         ("HOLD" ("WAITING") ("HOLD" . t))
                                         (done ("WAITING") ("HOLD"))
                                         ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
    ;; capture
    (setq org-capture-templates
          '(("w" "Work TODO" entry (file+olp "~/org/work.org" "Tasks") "* TODO %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TASKS\n:CREATED: %U\n:END:")
            ("o" "Work Overtime" entry (file+olp "~/org/work.org" "COMMENT Overtime") "* %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CREATED: %U\n:END:")
            ("m" "Work Meetings" entry (file+olp "~/org/work.org" "Meetings") "* %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: MEETINGS\n:CREATED: %U\n:END:")
            ("t" "Work Training's" entry (file+olp "~/org/work.org" "Training's") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TRAINING'S\n:CREATED: %U\n:END:")
            ("S" "Stuff TODO" entry (file+olp "~/org/stuff.org" "Tasks") "* TODO %? \n:PROPERTIES:\n:CATEGORY: TASKS\n:CREATED: %U\n:END:")
            ("M" "Stuff Meetings" entry (file+olp "~/org/stuff.org" "Meetings") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: MEETINGS\n:CREATED: %U\n:END:")
            ("T" "Stuff Training's" entry (file+olp "~/org/stuff.org" "Training's") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TRAINING'S\n:CREATED: %U\n:END:")))

    ;; configure the external apps to open files
    (add-to-list (quote org-file-apps)
                 (quote ("\\.pdf\\'" lambda (file link) (org-pdfview-open link))))

    ;; protect hidden trees for being inadvertily edited (do not work with evil)
    (setq-default org-catch-invisible-edits  'error
                  org-ctrl-k-protect-subtree 'error)

    ;; limit images width
    (setq org-image-actual-width nil)

    ;; :::::: Org-Babel ::::::
    ;; languages supported
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
             (org . t))))
    (setq org-babel-python-command "python")

    (defun conf:org-confirm-babel-evaluate (lang body)
      (not (member lang '("emacs-lisp" "python" "sh"))))

    (setq org-confirm-babel-evaluate 'conf:org-confirm-babel-evaluate)

    (defalias 'org-babel-execute:elisp 'org-babel-execute:emacs-lisp)

    ;; refresh images after execution
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)))

(leaf secretaria
  :straight t
  :require t
  :hook (after-init-hook . secretaria-unknown-time-always-remind-me))

(leaf ob-sql
  :leaf-defer nil
  :straight org-plus-contrib
  :commands (org-babel-execute:sql))

(leaf ob-python
  :leaf-defer nil
  :straight org-plus-contrib
  :commands (org-babel-execute:python))

(leaf ob-shell
  :leaf-defer nil
  :straight org-plus-contrib
  :commands (org-babel-execute:sh
             org-babel-expand-body:sh
             org-babel-execute:bash
             org-babel-expand-body:bash))

(leaf ob-plantuml
  :leaf-defer nil
  :straight org-plus-contrib
  :commands (org-babel-execute:plantuml)
  :config (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar"))

(leaf org-bullets
  :straight t
  :hook (org-mode-hook . org-bullets-mode))

(leaf ob-async :straight t)
(leaf ob-translate :straight t)
(leaf org-re-reveal :straight t)
(leaf htmlize :straight t)
(leaf default-text-scale :straight t :require t)
(leaf hide-mode-line :straight t :require t)

;; https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el#L1581
(leaf org-tree-slide
  :straight t
  :bind (org-tree-slide-mode-map
         ("q" . org-tree-slide-mode)
         ("C-b" . org-tree-slide-move-previous-tree)
         ("C-f" . org-tree-slide-move-next-tree)
         ("C-0" . conf:org-tree-slide-text-scale-reset)
         ("C-+" . conf:org-tree-slide-text-scale-inc1)
         ("C--" . conf:org-tree-slide-text-scale-dec1)
         ("C-1" . org-tree-slide-content)
         ("C-2" . conf:org-tree-slide-set-profile)
         ("C-3" . org-tree-slide-simple-profile)
         ("C-4" . org-tree-slide-presentation-profile))
  :config
  (progn
    (setq org-tree-slide--lighter " Slide")

    (defvar conf:org-tree-slide-text-scale 100
      "Text scale ratio to default when `org-tree-slide-mode' is enabled.")

    (defun conf:org-tree-slide-set-profile ()
      "Customize org-tree-slide variables."
      (interactive)
      (setq org-tree-slide-header t)
      (setq org-tree-slide-slide-in-effect nil)
      (setq org-tree-slide-heading-emphasis t)
      (setq org-tree-slide-cursor-init t) ;Move cursor to the head of buffer
      (setq org-tree-slide-modeline-display 'lighter)
      (setq org-tree-slide-skip-done nil)
      (setq org-tree-slide-skip-comments t)
      (setq org-tree-slide-activate-message
            (concat "Starting Org presentation. "
                    "Use arrow keys to navigate the slides."))
      (setq org-tree-slide-deactivate-message "Ended presentation.")
      (message "Custom `org-tree-slide' profile: ON"))

    (defvar conf:writegood-mode-state nil
      "Variable to store the state of `writegood-mode'.")

    (defun conf:org-tree-slide-start ()
      "Set up the frame for the slideshow."
      (interactive)
      (when (fboundp 'writegood-mode)
        (setq conf:writegood-mode-state writegood-mode)
        (writegood-mode -1))
      (flyspell-mode -1)
      (hide-mode-line-mode)
      (org-toggle-inline-images)
      (default-text-scale-increment conf:org-tree-slide-text-scale))

    (defun conf:org-tree-slide-stop()
      "Undo the frame setup for the slideshow."
      (interactive)
      (when (and (fboundp 'writegood-mode)
                 conf:writegood-mode-state)
        (writegood-mode 1)
        (setq conf:writegood-mode-state nil))
      (flyspell-mode 1)
      (hide-mode-line-mode -1)
      (org-remove-inline-images)
      (default-text-scale-reset))

    (defun conf:org-tree-slide-text-scale-reset ()
      "Reset time scale to `modi/org-tree-slide-text-scale'."
      (interactive)
      (text-scale-set conf:org-tree-slide-text-scale))

    (defun conf:org-tree-slide-text-scale-inc1 ()
      "Increase text scale by 1."
      (interactive)
      (text-scale-increase 1))

    (defun conf:org-tree-slide-text-scale-dec1 ()
      "Decrease text scale by 1."
      (interactive)
      (text-scale-decrease 1)))
  :hook ((org-tree-slide-play-hook . conf:org-tree-slide-start)
         (org-tree-slide-stop-hook . conf:org-tree-slide-stop)))

(leaf org-super-agenda
  :straight t
  :config
  (setq org-super-agenda-groups '((:name "Today"
                                         :time-grid t
                                         :scheduled today)
                                  (:name "Due today"
                                         :deadline today)
                                  (:name "Important"
                                         :priority "A")
                                  (:name "Overdue"
                                         :deadline past)
                                  (:name "Due soon"
                                         :deadline future)
                                  (:name "Big Outcomes"
                                         :tag "bo")))
  (org-super-agenda-mode))
 #+end_src
** pass
#+begin_src emacs-lisp
(leaf password-store
  :straight t
  :config
  (progn
    (setq password-store-password-length 30)))

(leaf pass
  :straight t
  :require t
  :commands pass
  :init
  (progn
    (defun my/pass-insert-generated (entry)
      "Same as pass-insert-generated but with my own template."
      (interactive (list (read-string "Password entry: ")))
      (when (or (not (seq-contains (password-store-list) entry))
                (yes-or-no-p "Erase existing entry with same name? "))
        (let ((password (shell-command-to-string
                         (format "pwgen --secure --symbols %s"
                                 password-store-password-length))))
          (password-store-insert
           entry
           (format "%s--\nusername: %s\nurl: https://%s\n"
                   password
                   user-mail-address
                   entry))
          (password-store-edit entry)
          (pass-update-buffer)))))
  :config (advice-add #'pass-insert-generated :override #'my/pass-insert-generated))

(leaf auth-source
  :init (setq auth-source-debug t
              auth-source-do-cache nil))

(leaf auth-source-pass
  :straight t
  :require t
  :after auth-source
  :init (setq auth-sources '(password-store)))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
(leaf pdf-tools
  :straight t
  :bind (pdf-view-mode-map
         ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
         ("g"  . pdf-view-first-page)
         ("G"  . pdf-view-last-page)
         ("l"  . image-forward-hscroll)
         ("h"  . image-backward-hscroll)
         ("j"  . pdf-view-next-line-or-next-page)
         ("k"  . pdf-view-previous-line-or-previous-page)
         ("e"  . pdf-view-goto-page)
         ("t"  . pdf-view-goto-label)
         ("u"  . pdf-view-revert-buffer)
         ("al" . pdf-annot-list-annotations)
         ("ad" . pdf-annot-delete)
         ("aa" . pdf-annot-attachment-dired)
         ("am" . pdf-annot-add-markup-annotation)
         ("at" . pdf-annot-add-text-annotation)
         ("y"  . pdf-view-kill-ring-save)
         ("i"  . pdf-misc-display-metadata)
         ("s"  . pdf-occur)
         ("b"  . pdf-view-set-slice-from-bounding-box)
         ("r"  . pdf-view-reset-slice))
  :init
  (pdf-tools-install t t)
  :config
  (setq pdf-misc-print-programm "/usr/bin/gtklp"
        pdf-misc-print-programm-args (quote ("-o media=A4" "-o fitplot"))
        pdf-view-display-size 'fit-page
        pdf-view-use-imagemagick t
        pdf-view-midnight-colors '("white smoke" . "gray5")))

(leaf org-pdfview
  :straight t
  :after org)
#+end_src
** pkgbuil
#+begin_src emacs-lisp
(leaf pkgbuild-mode
  :straight t
  :mode "PKGBUILD\\'")
#+end_src
** po-mode
#+begin_src emacs-lisp
(leaf po-mode
  :mode ("\\.po\\'" . po-mode)
  :config
  ;; Fuente: https://www.emacswiki.org/emacs/PoMode
  (defun po-wrap ()
    "Filter current po-mode buffer through `msgcat' tool to wrap all lines."
    (interactive)
    (if (eq major-mode 'po-mode)
        (let ((tmp-file (make-temp-file "po-wrap."))
              (tmp-buf (generate-new-buffer "*temp*")))
          (unwind-protect
              (progn
                (write-region (point-min) (point-max) tmp-file nil 1)
                (if (zerop
                     (call-process
                      "msgcat" nil tmp-buf t (shell-quote-argument tmp-file)))
                    (let ((saved (point))
                          (inhibit-read-only t))
                      (delete-region (point-min) (point-max))
                      (insert-buffer-substring tmp-buf)
                      (goto-char (min saved (point-max))))
                  (with-current-buffer tmp-buf
                    (error (buffer-string)))))
            (kill-buffer tmp-buf)
            (delete-file tmp-file)))))

  (defun po-guess-language ()
    "Return the language related to this PO file."
    (save-excursion
      (goto-char (point-min))
      (re-search-forward po-any-msgstr-block-regexp)
      (goto-char (match-beginning 0))
      (if (re-search-forward
           "\n\"Language: +\\(.+\\)\\\\n\"$"
           (match-end 0) t)
          (po-match-string 1))))

  (defadvice po-edit-string (around setup-spell-checking (string type expand-tabs) activate)
    "Set up spell checking in subedit buffer."
    (let ((po-language (po-guess-language)))
      ad-do-it
      (if po-language
          (progn
            (ispell-change-dictionary po-language)
            (turn-on-flyspell)
            (flyspell-buffer))))))
#+end_src
** presentation
#+begin_src emacs-lisp
(leaf presentation
  :straight t
  :config (global-set-key (kbd "<M-f5>") (lambda ()
                                           (interactive)
                                           (if presentation-mode
                                               (presentation-mode 0)
                                             (presentation-mode 1))
                                           (toggle-frame-fullscreen))))
#+end_src
** proced
#+begin_src emacs-lisp
(leaf proced
  :straight t
  :bind ("C-x p" . proced)
  :if (or (string-equal system-type "gnu/linux")
          (string-equal system-type "gnu/kfreebsd"))
  :init
  (setq proced-tree-flag t
        proced-auto-update-flag t))
#+end_src
** restart-emacs
#+begin_src emacs-lisp
(leaf restart-emacs  :straight t)
#+end_src
** shell
#+begin_src emacs-lisp
(leaf terminal-here
  :straight t
  :bind (("C-<f5>" . terminal-here-launch)
         ("C-<f6>" . terminal-here-project-launch))
  :config (setq terminal-here-terminal-command (list "urxvtcd" "-name" "Tmux" "-e" "tmx")))
#+end_src
** ssh
#+begin_src emacs-lisp
(leaf ssh
  :straight t
  :hook (ssh-mode-hook . (lambda ()
                           (setq ssh-directory-tracking-mode t)
                           (shell-dirtrack-mode t)
                           (setq dirtrackp nil))))
#+end_src
** sudo
#+begin_src emacs-lisp
(leaf sudo-edit
  :straight t)
#+end_src
** undo-tree
#+begin_src emacs-lisp :tangle no
(leaf undo-tree
  :straight t
  :leaf-defer nil
  :diminish undo-tree-mode
  :bind* ("C-x u" . undo-tree-visualizer)
  :init
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".7z")))

  ;; (defadvice undo-tree-visualize (around undo-tree-split-side-by-side activate)
  ;;   "Divide la ventana de lado a lado al visualizar undo-tree-visualize"
  ;;   (let ((split-height-threshold nil)
  ;;         (split-width-threshold 0))
  ;;     ad-do-it))

  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/cache/undo"))
        undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t
        undo-tree-auto-save-history t)
  (defalias 'redo 'undo-tree-redo)
  (global-undo-tree-mode 1))
#+end_src
** vlf
#+begin_src emacs-lisp
(leaf vlf-setup
  :straight vlf
  :init (setq vlf-application 'dont-ask))
#+end_src
** which-key
#+begin_src emacs-lisp
(leaf which-key
  :straight t
  :diminish which-key-mode
  :config
  (setq which-key-sort-order 'which-key-key-order-alpha)
  (which-key-mode))

(leaf which-key-posframe
  :straight t
  :config
  (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-left-corner
        which-key-posframe-border-width 0)
  (which-key-posframe-mode))
#+end_src
** xrdb
#+begin_src emacs-lisp
(leaf xrdb-mode
  :straight (xrdb-mode :type git :host github :repo "arkhan/xrdb-mode")
  :mode (("\\.Xdefaults$" . xrdb-mode)
         ("\\.Xenvironment$" . xrdb-mode)
         ("\\$Xresources$" . xrdb-mode)
         (".*\\.ad$" . xrdb-mode)
         (".*\\.x?rdb$" . xrdb-mode))
  :hook (xrdb-mode-hook . (lambda ()
                            (setq comment-start "! "))))
#+end_src
* End
#+begin_src emacs-lisp
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold 16777216
                  gc-cons-percentage 0.1
                  file-name-handler-alist cfg--file-name-handler-alist)))
(provide 'init)

;; Local Variables:
;; indent-tabs-mode: nil
;; End:

;;; init.el ends here
#+end_src
