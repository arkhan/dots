
#+TITLE:     Configuración de Emacs usando Org-Babel
#+AUTHOR:    arkhan
#+EMAIL:     arkhan@disroot.org
#+BABEL: :cache yes
#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el
#+OPTIONS: author:nil date:nil toc:nil title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmonofont[Scale=0.7]{DejaVu Sans Mono}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{breaklines}

* Config
** Straight
#+begin_src emacs-lisp
  ;;; init.el --- Emacs Configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;; This config start here

  (defvar cfg--file-name-handler-alist file-name-handler-alist)
  (setq gc-cons-threshold 402653184
    gc-cons-percentage 0.6
    file-name-handler-alist nil)

  (defvar conf:cache-dir (concat user-emacs-directory "cache/"))
  (unless (file-exists-p conf:cache-dir)
    (make-directory conf:cache-dir))

  (setq nsm-settings-file (concat conf:cache-dir "network-security.data"))
  (setq network-security-level 'high)

  (defvar bootstrap-version)
  (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq load-prefer-newer t)

  (setq straight-check-for-modifications '(check-on-save-find-when-checking))

  (straight-use-package 'use-package)
  (setq straight-enable-use-package-integration t
        straight-use-package-by-default t)

  (straight-use-package 'el-patch)
  (setq el-patch-enable-use-package-integration t)

  (eval-when-compile
    (require 'use-package))

  (require 'use-package)

  (use-package bind-key)
  (use-package diminish)

  (use-package async
    :defer t
    :config (setq async-bytecomp-package-mode t))
#+end_src
** async-tangle
#+begin_src emacs-lisp
  (defun tangle-init-async ()
    "If the current buffer is 'emacs-init.org' the code-blocks are tangled."
    (when (or
           (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "readme.org")))
           (equal (buffer-file-name)
                  (expand-file-name "~/.dots/emacs/readme.org")))
      (let ((prog-mode-hook nil))
        (async-shell-command "sh -c \"/usr/bin/emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)'\""))))
  (add-hook 'after-save-hook 'tangle-init-async)
#+end_src
** Maximized
#+begin_src emacs-lisp
(set-frame-parameter nil 'fullscreen 'maximized)
#+end_src
* abbrev
#+begin_src emacs-lisp :tangle no
  (use-package abbrev
    :straight nil
    :diminish abbrev-mode
    :config
    (abbrev-mode t)
    (setq abbrev-file-name (concat conf:cache-dir "abbrev.el")
          save-abbrevs 'silently
          default-abbrev-mode t
          save-abbrevs t)
    (when (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+end_src
* alert
#+begin_src emacs-lisp
  (use-package alert
    :config
    (if (eq system-type 'windows-nt)
        (setq alert-default-style 'message)
      (setq alert-default-style 'libnotify)))
#+end_src

* Anzu
#+begin_src emacs-lisp
    (use-package anzu
      :defer t
      :bind (("M-%" . anzu-query-replace)
	     ("C-M-%" . anzu-query-replace-regexp))
      :config
      (set-face-attribute 'anzu-mode-line nil :foreground "yellow" :weight 'bold)

      (defun cfg:anzu-update-func (here total)
	(when anzu--state
	  (let ((status (cl-case anzu--state
			  (search (format "[%d/%d Seek]" here total))
			  (replace-query (format "(%d Replaces)" total))
			  (replace (format "[%d/%d Replaces]" here total)))))
	    (propertize status 'face 'anzu-mode-line))))

      (setq anzu-cons-mode-line-p nil
	    anzu-mode-lighter ""
	    anzu-deactivate-region t
	    anzu-search-threshold 1000
	    anzu-replace-threshold 50
	    anzu-replace-to-string-separator " => "
	    anzu-mode-line-update-function #'cfg:anzu-update-func)

      (add-to-list 'minor-mode-alist
		   '(:eval (when anzu--state
			       (concat " " (anzu--update-mode-line)))))
      (global-anzu-mode +1))
#+end_src
* auth-password-store
#+begin_src emacs-lisp
  (use-package password-store
    :config
    (progn
      (setq password-store-password-length 30)))

  (use-package pass
    :commands pass
    :init
    (progn
      (defun my/pass-insert-generated (entry)
        "Same as pass-insert-generated but with my own template."
        (interactive (list (read-string "Password entry: ")))
        (when (or (not (seq-contains (password-store-list) entry))
                  (yes-or-no-p "Erase existing entry with same name? "))
          (let ((password (shell-command-to-string
                           (format "pwgen --secure --symbols %s"
                                   password-store-password-length))))
            (password-store-insert
             entry
             (format "%s--\nusername: %s\nurl: https://%s\n"
                     password
                     user-mail-address
                     entry))
            (password-store-edit entry)
            (pass-update-buffer)))))
    :config (advice-add #'pass-insert-generated :override #'my/pass-insert-generated))

  (use-package auth-source
    :straight nil
    :init (setq auth-source-debug t
                auth-source-do-cache nil))

  (use-package auth-source-pass
    :demand t
    :after auth-source
    :init (setq auth-sources '(password-store)))
#+end_src
* autorevert
#+begin_src emacs-lisp
  (use-package autorevert
    :straight nil
    :diminish auto-revert-mode
    :config (setq auto-revert-remote-files t
                  auto-revert-interval 1))

#+end_src
* Básico
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
                 use-dialog-box nil
                 use-file-dialog nil
                 initial-scratch-message nil
                 large-file-warning-threshold (* 15 1024 1024))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (toggle-indicate-empty-lines)
  (delete-selection-mode)
  (blink-cursor-mode -1)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (set-default 'truncate-lines t)

  (setq auto-save-default nil
                 auto-save-list-file-prefix nil
                 make-backup-files nil
                 create-lockfiles nil
                 frame-resize-pixelwise t)

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key "\M-p" 'backward-paragraph)
  (global-set-key "\M-n" 'forward-paragraph)
  (global-set-key (kbd "C-x k") 'kill-buffer-and-window)
#+end_src
* benchmark-init
#+begin_src emacs-lisp
  (use-package benchmark-init
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
* Bookmarks
#+begin_src emacs-lisp
  (use-package bookmark
    :straight nil
    :config
    (setq bookmark-default-file  (concat conf:cache-dir "bookmarks"))
    (when (file-exists-p bookmark-default-file)
      (bookmark-load bookmark-default-file t)))
#+end_src
* Bughunter
#+begin_src emacs-lisp
  (use-package bug-hunter
    :commands (bug-hunter-file bug-hunter-init-file))
#+end_src
* Buffer-expose
#+begin_src emacs-lisp :tangle no
  (use-package buffer-expose
    :straight (buffer-expose :type git :host github :repo "clemera/buffer-expose")
    :init (buffer-expose-mode 1)
    :config (defvar buffer-expose-mode-map
              (let ((map (make-sparse-keymap)))
                (define-key map (kbd "<s-tab>") 'buffer-expose)
                (define-key map (kbd "<C-tab>") 'buffer-expose-no-stars)
                (define-key map (kbd "C-c <C-tab>") 'buffer-expose-current-mode)
                (define-key map (kbd "C-c C-d") 'buffer-expose-dired-buffers)
                (define-key map (kbd "C-c C-*") 'buffer-expose-stars)
                map)
              "Mode map for command `buffer-expose-mode'."))

#+end_src
* Caldav
#+begin_src emacs-lisp
  (use-package org-caldav
    :bind ("<f6>" . org-caldav-sync)
    :config
    (setq org-icalendar-alarm-time 30
          org-icalendar-categories '(all-tags category todo-state)
          org-icalendar-include-todo t
          org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
          org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
          org-icalendar-with-timestamps t
          org-icalender-sync-todo t
          org-icalendar-timezone "America/Guayaquil")

    (setq org-caldav-calendars '((:calendar-id "arkhan/work"
                                               :files ("~/org/work.org")
                                               :inbox "~/org/inbox.org")
                                 (:calendar-id "arkhan/stuff"
                                               :files ("~/org/stuff.org")
                                               :inbox "~/org/inbox.org"))
          org-caldav-files org-agenda-files
          org-caldav-save-directory (concat conf:cache-dir "dav")
          org-caldav-show-sync-results nil
          org-caldav-url "https://cloud.disroot.org/remote.php/dav/calendars")
    (make-directory org-caldav-save-directory :parents)
    (setq org-caldav-backup-file (concat org-caldav-save-directory "caldav-backup.org")))


  (use-package calfw
    :bind ("C-c f" . cfw:open-org-calendar)
    :config
    (setq cfw:org-overwrite-default-keybinding t
          cfw:display-calendar-holidays nil
          calendar-week-start-day 1))

  (use-package calfw-org)
#+end_src
* Comment-dwim-2
#+begin_src emacs-lisp
  (use-package comment-dwim-2
    :defer t
    :bind* ("M-;" . comment-dwim-2))
#+end_src
* Company
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :commands (company-complete-common company-manual-begin company-grab-line)
  :init
  (setq company-minimum-prefix-length 2
        company-tooltip-limit 14
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil
        company-dabbrev-code-other-buffers t
        company-tooltip-align-annotations t
        company-require-match 'never
        company-global-modes
        '(not erc-mode message-mode help-mode gud-mode eshell-mode)
        company-backends '(company-capf)
        company-frontends
        '(company-pseudo-tooltip-frontend
          company-echo-metadata-frontend))

  :config
  (setq company-backends '((company-capf
                            company-ispell
                            company-keywords
                            company-yasnippet)
                           (company-abbrev company-dabbrev)))
  (global-company-mode +1))

(use-package company-prescient
  :after company
  :init (company-prescient-mode))

(use-package company-posframe
  :diminish company-posframe-mode
  :config (company-posframe-mode 1))

(use-package all-the-icons)

(use-package company-box
  :diminish company-box-mode
  :config
  (setq company-box-show-single-candidate t
        company-box-backends-colors nil
        company-box-max-candidates 50
        company-box-icons-functions '(+company-box-icons--yasnippet +company-box-icons--elisp)
        company-box-icons-alist 'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        `((Unknown       . ,(all-the-icons-material "find_in_page"             :height 0.8 :face 'all-the-icons-purple))
          (Text          . ,(all-the-icons-material "text_fields"              :height 0.8 :face 'all-the-icons-green))
          (Method        . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Function      . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Constructor   . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Field         . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Variable      . ,(all-the-icons-material "adjust"                   :height 0.8 :face 'all-the-icons-blue))
          (Class         . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          (Interface     . ,(all-the-icons-material "settings_input_component" :height 0.8 :face 'all-the-icons-red))
          (Module        . ,(all-the-icons-material "view_module"              :height 0.8 :face 'all-the-icons-red))
          (Property      . ,(all-the-icons-material "settings"                 :height 0.8 :face 'all-the-icons-red))
          (Unit          . ,(all-the-icons-material "straighten"               :height 0.8 :face 'all-the-icons-red))
          (Value         . ,(all-the-icons-material "filter_1"                 :height 0.8 :face 'all-the-icons-red))
          (Enum          . ,(all-the-icons-material "plus_one"                 :height 0.8 :face 'all-the-icons-red))
          (Keyword       . ,(all-the-icons-material "filter_center_focus"      :height 0.8 :face 'all-the-icons-red))
          (Snippet       . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-red))
          (Color         . ,(all-the-icons-material "color_lens"               :height 0.8 :face 'all-the-icons-red))
          (File          . ,(all-the-icons-material "insert_drive_file"        :height 0.8 :face 'all-the-icons-red))
          (Reference     . ,(all-the-icons-material "collections_bookmark"     :height 0.8 :face 'all-the-icons-red))
          (Folder        . ,(all-the-icons-material "folder"                   :height 0.8 :face 'all-the-icons-red))
          (EnumMember    . ,(all-the-icons-material "people"                   :height 0.8 :face 'all-the-icons-red))
          (Constant      . ,(all-the-icons-material "pause_circle_filled"      :height 0.8 :face 'all-the-icons-red))
          (Struct        . ,(all-the-icons-material "streetview"               :height 0.8 :face 'all-the-icons-red))
          (Event         . ,(all-the-icons-material "event"                    :height 0.8 :face 'all-the-icons-red))
          (Operator      . ,(all-the-icons-material "control_point"            :height 0.8 :face 'all-the-icons-red))
          (TypeParameter . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          ;; (Template   . ,(company-box-icons-image "Template.png"))))
          (Yasnippet     . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-green))
          (ElispFunction . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (ElispVariable . ,(all-the-icons-material "check_circle"             :height 0.8 :face 'all-the-icons-blue))
          (ElispFeature  . ,(all-the-icons-material "stars"                    :height 0.8 :face 'all-the-icons-orange))
          (ElispFace     . ,(all-the-icons-material "format_paint"             :height 0.8 :face 'all-the-icons-pink))))
  (defun +company-box-icons--yasnippet (candidate)
    (when (get-text-property 0 'yas-annotation candidate)
      'Yasnippet))

  (defun +company-box-icons--elisp (candidate)
    (when (derived-mode-p 'emacs-lisp-mode)
      (let ((sym (intern candidate)))
        (cond ((fboundp sym)  'ElispFunction)
              ((boundp sym)   'ElispVariable)
              ((featurep sym) 'ElispFeature)
              ((facep sym) 'ElispFace)))))
  :hook (company-mode . company-box-mode))
#+end_src
* Csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t
    :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
    :config (setq csv-separators '("," ";" "|" " ")))
#+end_src
* Cursor
#+begin_src emacs-lisp
  (setq-default cursor-type '(hbar . 2))
  (setq x-stretch-cursor t)

  (use-package frame
    :straight nil
    :config
    (defun set-cursor-hook (frame)
      (modify-frame-parameters
       frame (list (cons 'cursor-color "white"))))

    (add-hook 'after-make-frame-functions 'set-cursor-hook))
#+end_src
* custom.el
#+begin_src emacs-lisp
  (setq custom-file (concat conf:cache-dir "custom.el"))
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load custom-file)
#+end_src
* Directorios
#+begin_src emacs-lisp
  (setq-default semanticdb-default-save-directory (concat conf:cache-dir "semanticdb")
                url-configuration-directory (concat conf:cache-dir "url")
                eshell-directory-name (concat conf:cache-dir "eshell" ))
#+end_src
* Docker
#+begin_src emacs-lisp
  ;;(use-package docker)

  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (use-package docker-compose-mode
    :mode ("docker-compose.*\.yml\\'" . docker-compose-mode))
#+end_src
* dumb-jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy))
#+end_src
* easy-kill
#+begin_src emacs-lisp
  (use-package easy-kill
    :bind (([remap kill-ring-save] . #'easy-kill)
           ([remap mark-sexp] . #'easy-mark)))
#+end_src
* Ediff
#+begin_src emacs-lisp
  (use-package ediff-wind
    :straight nil
    :defer t
    :config
    ;; Split windows horizontally in ediff (instead of vertically)
    (setq ediff-split-window-function 'split-window-horizontally)

    ;; No separate frame for ediff control buffer
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    (setq ediff-diff-options "-w")

    ;; Show all in org files with ediff
    (defun ediff-outline-show-all ()
      (if (eq major-mode 'org-mode)
          (outline-show-all)))

    (add-hook 'ediff-prepare-buffer-hook #'ediff-outline-show-all)

    ;; ediff buffer with file
    (defalias 'ediff-buffer-with-file 'ediff-current-file))
#+end_src
* EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :defer 1
    :diminish ""
    :config (editorconfig-mode))
#+end_src
* Eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+end_src
* Empty Buffer
#+begin_src emacs-lisp
  (defun empty-buffer? ()
    (= (buffer-end 1) (buffer-end -1)))
#+end_src
* Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer 1
  :bind (("C-c e n" . flycheck-next-error)
         ("C-c e p" . flycheck-previous-error))
  :config
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))
  :hook (after-init . global-flycheck-mode))

(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode))
#+end_src
* Flymake
#+begin_src emacs-lisp :tangle no
  (use-package flymake-diagnostic-at-point
    :straight (flymake-diagnostic-at-point :type git :host github :repo "waymondo/flymake-diagnostic-at-point" :branch "posframe-support")
    :after flymake
    :config
    (setq flymake-diagnostic-at-point-display-diagnostic-function 'flymake-diagnostic-at-point-display-posframe)
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
#+end_src
* Flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :bind (("C-c t s" . flyspell-mode)
         ("C-c l b" . flyspell-buffer)
         :map flyspell-mode-map
         ("\M-\t" . nil)
         ([down-mouse-2] . nil)
         ([mouse-2] . nil))
  :init
  (dolist (hook '(TeX-mode-hook LaTeX-mode-hook text-mode-hook message-mode-hook markdown-mode-hook org-mode-hook))
    (add-hook hook 'turn-on-flyspell))
  :config
  (setq flyspell-use-meta-tab nil
        flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil)

  (setq-default ispell-program-name "hunspell"
                ispell-really-hunspell t
                ispell-check-comments t
                ispell-local-dictionary "en_US"
                ispell-local-dictionary-alist
                '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
                  ("es_EC" "[[:alpha:]]" "[^[:alpha:]]" "[ñ]" nil ("-d" "es_EC") nil utf-8)))

  (defun switch-dictionary ()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "en_US") "es_EC" "en_US")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))

  (defun turn-on-spell-check ()
    (flyspell-mode 1))

  (global-set-key (kbd "M-i") 'switch-dictionary)

  (defun flyspell-add-word-to-dict ()
    "Add the word at the current location to the private dictionary
       without question."
    (interactive)
    ;; use the correct dictionary
    (flyspell-accept-buffer-local-defs)
    (setq opoint (point-marker))
    (let ((cursor-location (point))
          (word (flyspell-get-word nil)))
      (if (consp word)
          (let ((start (car (cdr word)))
                (end (car (cdr (cdr word))))
                (word (car word)))
            ;; The word is incorrect, we have to propose a replacement.
            (flyspell-do-correct 'save nil word cursor-location start end opoint)))
      (ispell-pdict-save t)))

  (define-key flyspell-mode-map [(control ?\")] 'flyspell-add-word-to-dict)
  :hook (prog-mode . flyspell-prog-mode))

(use-package flyspell-correct-popup
  :bind ("C-M-'" . flyspell-correct-wrapper)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-popup
        flyspell-correct-auto-mode-interface #'flyspell-correct-popup))
#+end_src
* Font
#+begin_src emacs-lisp
(use-package unicode-fonts
  :init (unicode-fonts-setup))

(global-font-lock-mode 1)
(set-face-attribute 'default nil :font "MonacoB:pixelsize=15")
#+end_src
* Format-all
#+begin_src emacs-lisp
  (use-package format-all
    :defer t
    :bind (:map prog-mode-map
                ("<M-f8>" . format-all-buffer)))
#+end_src
* Frame Title
#+begin_src emacs-lisp
  (setq-default frame-title-format
                (list (user-login-name) "@" (system-name) " %b [%m]"))
#+end_src
* Git
#+begin_src emacs-lisp
(setq vc-follows-symlinks t
      find-file-visit-truename t
      vc-handled-backends nil)

(use-package transient
  :config (setq transient-history-file (concat conf:cache-dir "transient.el")))

(use-package magit

  :bind (("C-x g c" . magit-commit-create)
         ("C-x g e" . magit-ediff-resolve)
         ("C-x g g" . magit-grep)
         ("C-x g l" . magit-file-log)
         ("C-x g p" . magit-push-other)
         ("C-x g r" . magit-rebase-interactive)
         ("C-x g s" . magit-status)
         ("C-x g u" . magit-pull-other)
         ("C-x g x" . magit-checkout))
  :init
  (progn
    (setq magit-git-executable "tg")
    (delete 'Git vc-handled-backends)
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defadvice git-commit-commit (after delete-window activate)
      (delete-window))
    (defadvice git-commit-abort (after delete-window activate)
      (delete-window))
    (defun magit-commit-mode-init ()
      (when (looking-at "\n")
        (open-line 1))))
  :config
  (progn
    (defadvice magit-quit-window (around magit-restore-screen activate)
      (let ((current-mode major-mode))
        ad-do-it
        (when (eq 'magit-status-mode current-mode)
          (jump-to-register :magit-fullscreen))))
    (defun magit-maybe-commit (&optional show-options)
      "Runs magit-commit unless prefix is passed"
      (interactive "P")
      (if show-options
          (magit-key-mode-popup-committing)
        (magit-commit-create)))
    (define-key magit-mode-map "c" 'magit-maybe-commit)

    (setq magit-completing-read-function 'ivy-completing-read
          magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
          magit-status-buffer-switch-function 'switch-to-buffer
          magit-diff-refine-hunk t
          magit-rewrite-inclusive 'ask
          magit-process-find-password-functions '(magit-process-password-auth-source)
          magit-save-some-buffers t
          magit-process-popup-time 10
          magit-set-upstream-on-push 'askifnotset
          magit-refs-show-commit-count 'all
          magit-log-buffer-file-locket t)))

(use-package magit-gitflow
  :config
  (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

(use-package git-gutter
  :defer 1
  :bind (("C-x C-g" . git-gutter)
         ("C-x v =" . git-gutter:popup-hunk)
         ("C-x p" . git-gutter:previous-hunk)
         ("C-x n" . git-gutter:next-hunk)
         ("C-x v s" . git-gutter:stage-hunk)
         ("C-x v r" . git-gutter:revert-hunk)
         ("C-x v SPC" . git-gutter:mark-hunk))
  :config
  (if (display-graphic-p)
      (use-package git-gutter-fringe))
  (global-git-gutter-mode t)
  (setq indicate-empty-lines nil)
  (setq git-gutter:lighter ""
        git-gutter:handled-backends '(git hg bzr svn))
  (set-face-foreground 'git-gutter:modified "purple")
  (set-face-foreground 'git-gutter:added "green")
  (set-face-foreground 'git-gutter:deleted "red"))

(use-package gitconfig-mode
  :defer t
  :mode ("/\\.?git/?config$"
         "/\\.gitmodules$")
  :init (add-hook 'gitconfig-mode-hook 'flyspell-mode))

(use-package gitignore-mode
  :defer t
  :mode ("/\\.gitignore$"
         "/\\.git/info/exclude$"
         "/git/ignore$"))

(use-package gitattributes-mode :defer t)

(use-package git-timemachine
  :defer t
  :commands git-timemachine
  :bind (:map git-timemachine-mode
              ("c" . git-timemachine-show-current-revision)
              ("b" . git-timemachine-switch-branch)))

(use-package smerge-mode
  :defer t
  :config
  (defun enable-smerge-maybe ()
    (when (and buffer-file-name (vc-backend buffer-file-name))
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^<<<<<<< " nil t)
          (smerge-mode +1)))))

  (add-hook 'buffer-list-update-hook #'enable-smerge-maybe))
#+end_src
* highlight-indent-guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :diminish highlight-indent-guides-mode
  :config (setq highlight-indent-guides-method 'character)
  :hook (prog-mode . highlight-indent-guides-mode))
#+end_src
* Historial
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq savehist-file (concat conf:cache-dir "history")
      history-delete-duplicates t
      savehist-save-minibuffer-history 1
      savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
(savehist-mode t)
#+end_src
* i3wm
#+begin_src emacs-lisp
(use-package i3wm-config-mode
  :straight (i3wm-config-mode :type git :host github :repo "Alexander-Miller/i3wm-Config-Mode"))
#+end_src
* IBuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :config
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("EXWM" (mode . exwm-mode))
                 ("org" (name . "^.*org$"))

                 ("web" (or (mode . web-mode)
                            (mode . php-mode)
                            (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode)
                              (mode . term-mode)
                              (mode . shell-mode)))
                 ("prog" (or (mode . python-mode)
                             (mode . nxml-mode)
                             (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                                        ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t))

(use-package ibuffer-sidebar
  :commands (ibuffer-sidebar-toggle-sidebar)
  :bind ("C-x C-b" . ibuffer-sidebar-toggle-sidebar))
#+end_src
* Imenu
#+begin_src emacs-lisp
(use-package imenu-list
  :defer t
  :bind ("M-2" . imenu-list-smart-toggle)
  :config
  (setq imenu-list-size 36
        imenu-list-position 'left
        imenu-list-focus-after-activation t
        imenu-list-after-jump-hook nil))
#+end_src
* avy
#+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-all-windows t))
#+end_src
* Ivy, Counsel, Swiper
#+begin_src emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind (:map ivy-mode-map
              ("C-'" . ivy-avy))
  :config
  (setq ivy-wrap t
        ivy-virtual-abbreviate 'full
        ivy-use-virtual-buffers t
        ivy-use-selectable-prompt t
        ivy-count-format "(%d/%d) "
        ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                (t . ivy--regex-plus))
        ivy-on-del-error-function nil
        ivy-initial-inputs-alist nil
        enable-recursive-minibuffers t)

  (add-to-list 'ivy-ignore-buffers "\\*Async Shell Command\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Messages\\*")
  (add-to-list 'ivy-ignore-buffers "\\*elfeed-log\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Help\\*")
  (add-to-list 'ivy-ignore-buffers "\\*Compile-Log\\*")
  (add-to-list 'ivy-ignore-buffers "\\*magit-.*")
  (add-to-list 'ivy-ignore-buffers "\\magit-.*")
  (add-to-list 'ivy-ignore-buffers "\\*tide")
  (add-to-list 'ivy-ignore-buffers "\\*Flycheck.*")
  (add-to-list 'ivy-ignore-buffers "\\*lsp-.*")
  (add-to-list 'ivy-ignore-buffers "\\*git-gutter:.*")
  (with-eval-after-load "projectile"
    (setf projectile-globally-ignored-buffers ivy-ignore-buffers))

  (defun conf:ivy-format-function-arrow (cands)
    "Transform CAND-PAIRS into a string for minibuffer."
    (ivy--format-function-generic
     (lambda (str)
       (concat "-> " (ivy--add-face str 'ivy-current-match)))
     (lambda (str)
       (concat "   " str))
     cands
     "\n"))
  (setq ivy-format-function 'conf:ivy-format-function-arrow)
  (ivy-mode 1))

(use-package ivy-prescient
  :after ivy
  :init (ivy-prescient-mode))

(setq confirm-nonexistent-file-or-buffer t)

(use-package swiper
  :bind* (("C-s" . swiper)
          ("C-r" . swiper)
          ("C-M-s" . swiper-all))
  :bind
  (:map read-expression-map
        ("C-r" . counsel-minibuffer-history)))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-c b" . counsel-imenu)
         ("C-x C-r" . counsel-rg)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("C-h b" . counsel-descbinds)
         ("M-y" . counsel-yank-pop)
         ("M-SPC" . counsel-shell-history))
  :config
  (setq counsel-find-file-at-point t
        counsel-rg-base-command "rg -uuu -S -g '!/volumes' -g '!/backups' -g '/.git' --no-heading --line-number --color never %s ."))

(use-package ivy-rich
  :config
  (setq ivy-rich--display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30))  ; return the candidate itself
            (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
            (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
            (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
           :predicate
           (lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
            (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))) ; return the last modified time of the file
        ivy-virtual-abbreviate 'full
        ivy-rich-path-style 'abbrev)
  (ivy-rich-mode 1))
#+end_src
* Jinja
#+begin_src emacs-lisp
  (use-package jinja2-mode)
#+end_src
* Logview
#+begin_src emacs-lisp
  (use-package logview
    :config (add-hook 'logview-mode-hook 'auto-revert-mode))
#+end_src
* LSP Mode
#+begin_src emacs-lisp :tangle no
(use-package lsp
  :straight lsp-mode
  :commands lsp
  :defer t
  :config
  (require 'lsp-clients)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  :init
  (setq lsp-eldoc-render-all nil
        lsp-print-io nil
        lsp-inhibit-message t
        lsp-message-project-root-warning t
        lsp-auto-guess-root t
        lsp-prefer-flymake nil
        lsp-session-file (concat conf:cache-dir "lsp-session")))

;; ref: https://gitlab.com/shackra/emacs/commit/b0df30fe744e4483a08731e6a9f6482ab408124c
(defvar-local conf:lsp-on-change-exist nil
  "indica si la función `lsp-on-change' estaba insertada en `after-change-functions'")

(defun conf:lsp-on-change-modify-hook ()
  "Remueve o agrega `lsp-on-change' de `after-change-functions'"
  (if (not conf:lsp-on-change-exist)
      ;; quita la función, solamente si estaba insertada desde un principio
      (when (memq 'lsp-on-change after-change-functions)
        (setq conf:lsp-on-change-exist t)
        (remove-hook 'after-change-functions 'lsp-on-change t))
    ;; agrega la función
    (add-hook 'after-change-functions #'lsp-on-change nil t)
    (setq conf:lsp-on-change-exist nil)))


(use-package lsp-ui
  :after lsp
  :commands lsp-ui-mode
  :init
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-ignore-duplicate t
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-enable nil)
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package company-lsp
  :defer t
  :commands company-lsp
  :config
  (setq company-lsp-async t)
  (push '(company-lsp :with company-yasnippet) company-backends))
#+end_src
* Makefile
#+begin_src emacs-lisp
  (use-package makefile-runner
    :straight (makefile-runner :type git :host github :repo "danamlund/emacs-makefile-runner")
    :bind ("<C-f11>" . makefile-runner))
#+end_src
* Modo Mayor por defecto
#+begin_src emacs-lisp
  (setq major-mode 'text-mode
        current-language-environment "Spanish")
#+end_src
* EMMS
  #+begin_src emacs-lisp
    ;; (use-package emms
    ;;   :config
    ;;   (require 'emms-setup)
    ;;   (require 'emms-info-libtag)
    ;;   (require 'emms-mode-line)
    ;;   (require 'emms-playing-time)
    ;;   (require 'emms-player-mpd)
    ;;   (emms-all)
    ;;   (emms-default-players)
    ;;   (setq emms-player-list '(emms-player-mpd)
    ;;         emms-source-file-default-directory "~/Music/"
    ;;         emms-player-mpd-music-directory "~/Music"
    ;;         emms-playlist-buffer-name "*Music*"
    ;;         emms-info-asynchronously t
    ;;         emms-info-functions '(emms-info-libtag))
    ;;   (emms-mode-line 1)
    ;;   (emms-playing-time 1))
    (use-package emms
      :config
        (require 'emms-setup)
        (require 'emms-player-mpd)
        (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
        (setq emms-seek-seconds 5)
        (setq emms-player-list '(emms-player-mpd))
        (setq emms-info-functions '(emms-info-mpd))
      :bind
        ("s-m p" . emms)
        ("s-m b" . emms-smart-browse)
        ("s-m r" . emms-player-mpd-update-all-reset-cache)
        ("<XF86AudioPrev>" . emms-previous)
        ("<XF86AudioNext>" . emms-next)
        ("<XF86AudioPlay>" . emms-pause)
        ("<XF86AudioStop>" . emms-stop))
  #+end_src
* move-dup
#+begin_src emacs-lisp
  (use-package move-dup
    :defer t
    :diminish move-dup-mode
    :bind (("S-M-<up>" . md/move-lines-up)
           ("S-M-<down>" . md/move-lines-down)
           ("C-M-<up>" . 'md/duplicate-up)
           ("C-M-<down>" . 'md/duplicate-down))
    :init (global-move-dup-mode))
#+end_src
* mu4e
#+begin_src emacs-lisp
  (use-package link-hint
    :bind (("C-c l o" . link-hint-open-link)
           ("C-c l c" . link-hint-copy-link)))

  (use-package mu4e
    :straight nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :bind ("<f1>" . mu4e)
    :preface
    (defadvice mu4e (before mu4e-start activate)
      "Antes de ejecutar `mu4e' borramos todas las ventanas"
      (when (> 1 (count-windows))
        (window-configuration-to-register :mu4e-fullscreen)
        (delete-other-windows)))

    (defadvice mu4e-quit (after mu4e-close-and-push activate)
      "Despues de salir de mu4e ejecutamos un script para subir los cambios al buzon de correo y para también restaurar la disposición de ventanas"
      (start-process "pushmail" "*pushmail-mbsync*" "mbsync" "-a" "--push")
      (when (get-register :mu4e-fullscreen)
        (jump-to-register :mu4e-fullscreen)))
    :init
    (require 'mu4e-contrib)
    (setq mail-user-agent 'mu4e-user-agent
          message-citation-line-format "\nEl %A %d de %B del %Y a las %H%M horas, %N escribió:\n"
          message-citation-line-function 'message-insert-formatted-citation-line
          message-cite-reply-position 'below
          message-kill-buffer-on-exit t
          message-send-mail-function 'message-send-mail-with-sendmail
          mu4e-attachment-dir  "~/Descargas"
          mu4e-auto-retrieve-keys t
          mu4e-compose-context-policy 'ask
          mu4e-compose-dont-reply-to-self t
          mu4e-compose-keep-self-cc nil
          mu4e-context-policy 'pick-first
          mu4e-headers-date-format "%Y-%m-%d %H:%M"
          mu4e-headers-include-related t
          mu4e-headers-auto-update nil
          mu4e-headers-leave-behavior 'ignore
          mu4e-headers-visible-lines 8
          mu4e-headers-fields '((:date . 25)
                                (:flags . 6)
                                (:from . 22)
                                (:subject . nil))
          mu4e-view-prefer-html t
          mu4e-html2text-command "w3m -dump -T text/html -cols 72 -o display_link_number=true -o auto_image=false -o display_image=true -o ignore_null_img_alt=true"
          mu4e-maildir "~/.mail"
          mu4e-view-show-images t
          sendmail-program "msmtp"
          mu4e-get-mail-command "mbsync -aV")

    (defun mu4e-message-maildir-matches (msg rx)
      (when rx
        (if (listp rx)
            ;; If rx is a list, try each one for a match
            (or (mu4e-message-maildir-matches msg (car rx))
                (mu4e-message-maildir-matches msg (cdr rx)))
          ;; Not a list, check rx
          (string-match rx (mu4e-message-field msg :maildir)))))

    (defun choose-msmtp-account ()
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (account
                  (cond
                   ((string-match "arkhan@disroot.org" from) "Personal")
                   ((string-match "edison@disroot.org" from) "Work")
                   ((string-match "arkhan.xxx@gmail.com" from) "Gmail"))))
              (setq message-sendmail-extra-arguments (list '"-a" account))))))

    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "Personal"
               :enter-func (lambda () (mu4e-message "Switch to the Personal context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-maildir-matches msg "^/Personal")))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address     . "arkhan@disroot.org")
                       (user-full-name        . "Edison Ibáñez")
                       (mu4e-sent-folder      . "/Personal/Sent")
                       (mu4e-drafts-folder    . "/Personal/Drafts")
                       (mu4e-trash-folder     . "/Personal/Trash")
                       (mu4e-refile-folder    . "/Personal/Archive")))
             ,(make-mu4e-context
               :name "Work"
               :enter-func (lambda () (mu4e-message "Switch to the Work context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-maildir-matches msg "^/Work")))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address     . "edison@disroot.org")
                       (user-full-name        . "Edison Ibáñez")
                       (mu4e-sent-folder      . "/Work/Sent")
                       (mu4e-drafts-folder    . "/Work/Drafts")
                       (mu4e-trash-folder     . "/Work/Trash")
                       (mu4e-refile-folder    . "/Work/Archive")))
             ,(make-mu4e-context
               :name "Gmail"
               :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-maildir-matches msg "^/Gmail")))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address     . "arkhan.xxx@gmail.com")
                       (user-full-name        . "Edison Ibáñez")
                       (mu4e-sent-folder      . "/Gmail/Sent Mail")
                       (mu4e-trash-folder     . "/Gmail/Trash")
                       (mu4e-refile-folder    . "/Gmail/All Mail")
                       (mu4e-drafts-folder    . "/Gmail/Drafts")))))

    (add-hook 'message-send-mail-hook 'choose-msmtp-account)
    (run-at-time nil (* 60 5) 'mu4e-update-mail-and-index t)

    (bind-key "C-c c" 'org-mu4e-store-and-capture mu4e-headers-mode-map)
    (bind-key "C-c c" 'org-mu4e-store-and-capture mu4e-view-mode-map))

  (use-package mu4e-alert
    :if (executable-find "mu")
    :init
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (setq mu4e-compose-forward-as-attachment t
          mu4e-compose-crypto-reply-encrypted-policy 'sign-and-encrypt
          mu4e-compose-crypto-reply-plain-policy 'sign
          mu4e-index-update-in-background t
          mu4e-alert-email-notification-types '(subjects))
    :config
    (defun conf:refresh-mu4e-alert-mode-line ()
      (interactive)
      (mu4e~proc-kill)
      (mu4e-alert-enable-mode-line-display))
    (run-with-timer 0 60 'conf:refresh-mu4e-alert-mode-line)
    (mu4e-alert-set-default-style 'libnotify))

  (use-package mu4e-maildirs-extension
    :after mu4e
    :config (mu4e-maildirs-extension))
#+end_src
* Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer t
    :init (add-hook 'multiple-cursors-mode-hook #'conf:lsp-on-change-modify-hook))
#+end_src
* Neotree
#+begin_src emacs-lisp
  (use-package shrink-path)

  (use-package neotree
    :bind (:map neotree-mode-map
                ("<C-return>" . neotree-change-root)
                ("C" . neotree-change-root)
                ("c" . neotree-create-node)
                ("+" . neotree-create-node)
                ("d" . neotree-delete-node)
                ("r" . neotree-rename-node))
    :config (setq neo-theme 'ascii
                  neo-vc-integration nil
                  neo-window-width 36
                  neo-create-file-auto-open t
                  neo-smart-open t
                  neo-show-auto-change-root t
                  neo-autorefresh nil
                  neo-banner-message nil
                  neo-mode-line-type 'neotree
                  neo-dont-be-alone t
                  neo-persist-show t
                  neo-show-updir-line nil
                  neo-show-hidden-files nil
                  neo-auto-indent-point t
                  neo-hidden-regexp-list '(".DS_Store" ".idea/" ".pyc" ".tern-port"
                                           ".git/*" "node_modules/*" ".meteor" "deps"))

    (defun shrink-root-entry (node)
      "shrink-print pwd in neotree"
      (insert (propertize (concat (shrink-path-dirs node) "\n") 'face `(:inherit (,neo-root-dir-face)))))

    (advice-add #'neo-buffer--insert-root-entry :override #'shrink-root-entry))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
             (projectile-project-root)))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
  (global-set-key (kbd "M-1") 'neotree-project-dir-toggle)
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package dired
  :straight nil
  :config
  (progn
    (setq dired-listing-switches "-lXGh --group-directories-first")
    (add-hook 'dired-mode-hook 'dired-hide-details-mode)))

(defun mhj/toggle-project-explorer ()
  "Toggle the project explorer window."
  (interactive)
  (let* ((buffer (dired-noselect (projectile-project-root)))
         (window (get-buffer-window buffer)))
    (if window
        (mhj/hide-project-explorer)
      (mhj/show-project-explorer))))

(defun mhj/show-project-explorer ()
  "Project dired buffer on the side of the frame.
  Shows the projectile root folder using dired on the left side of
  the frame and makes it a dedicated window for that buffer."
  (let ((buffer (dired-noselect (projectile-project-root))))
    (progn
      (display-buffer-in-side-window buffer '((side . left) (window-width . 0.2)))
      (set-window-dedicated-p (get-buffer-window buffer) t))))

(defun mhj/hide-project-explorer ()
  "Hide the project-explorer window."
  (let ((buffer (dired-noselect (projectile-project-root))))
    (progn
      (delete-window (get-buffer-window buffer))
      (kill-buffer buffer))))


(use-package dired-toggle
  :defer t
  :bind (("<f3>" . #'dired-toggle)
         :map dired-mode-map
         ("q" . #'dired-toggle-quit)
         ([remap dired-find-file] . #'dired-toggle-find-file)
         ([remap dired-up-directory] . #'dired-toggle-up-directory)
         ("C-c C-u" . #'dired-toggle-up-directory))
  :config
  (setq dired-toggle-window-size 32)
  (setq dired-toggle-window-side 'left)

  ;; Optional, enable =visual-line-mode= for our narrow dired buffer:
  (add-hook 'dired-toggle-mode-hook
            (lambda () (interactive)
              (visual-line-mode 1)
              (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
              (setq-local word-wrap nil))))

(use-package dired-subtree
  :demand
  :bind
  (:map dired-mode-map
        ("<enter>" . mhj/dwim-toggle-or-open)
        ("<return>" . mhj/dwim-toggle-or-open)
        ("<tab>" . mhj/dwim-toggle-or-open)
        ("<down-mouse-1>" . mhj/mouse-dwim-to-toggle-or-open))
  :config
  (progn
    ;; Function to customize the line prefixes (I simply indent the lines a bit)
    (setq dired-subtree-line-prefix (lambda (depth) (make-string (* 2 depth) ?\s)))
    (setq dired-subtree-use-backgrounds nil)))

(defun mhj/dwim-toggle-or-open ()
  "Toggle subtree or open the file."
  (interactive)
  (if (file-directory-p (dired-get-file-for-visit))
      (progn
        (dired-subtree-toggle)
        (revert-buffer))
    (dired-find-file)))

(defun mhj/mouse-dwim-to-toggle-or-open (event)
  "Toggle subtree or the open file on mouse-click in dired."
  (interactive "e")
  (let* ((window (posn-window (event-end event)))
         (buffer (window-buffer window))
         (pos (posn-point (event-end event))))
    (progn
      (with-current-buffer buffer
        (goto-char pos)
        (mhj/dwim-toggle-or-open)))))


(use-package dired-hide-dotfiles
  :config
  (defun my-dired-mode-hook ()
    "My `dired' mode hook."
    ;; To hide dot-files by default
    (dired-hide-dotfiles-mode)
    ;; To toggle hiding
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))
  (add-hook 'dired-mode-hook #'my-dired-mode-hook))
#+end_src
* Nginx
#+begin_src emacs-lisp
(use-package nginx-mode
  :mode ("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
#+end_src
* Orgmode
#+begin_src emacs-lisp
(use-package org
  :straight org-plus-contrib
  :defer 1
  :bind (("C-x a" . org-agenda-list)
         ("C-x c" . org-capture))
  :config
  (progn
    (add-hook 'org-mode-hook
              (lambda ()
                (turn-on-auto-fill)
                (switch-dictionary)))

    ;; set the modules enabled by default
    (setq org-modules '(org-bbdb org-bibtex org-docview org-mhe
                                 org-rmail org-crypt org-protocol org-id
                                 org-info org-habit org-irc org-annotate-file
                                 org-eval org-expiry org-tempo org-panel org-toc ox-md))

    ;; set default directories
    (setq org-id-locations-file (concat conf:cache-dir "org-id.el")
          org-directory "~/org"
          org-default-notes-file (concat org-directory "/notes.org"))

    ;; set the archive
    (setq org-archive-location (concat org-directory "/archive.org::datetree/** Archived"))

    ;; highlight code blocks syntax
    (setq org-src-fontify-natively t
          org-src-window-setup 'current-window
          org-src-strip-leading-and-trailing-blank-lines t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t)

    ;; more sane emphasis regex to export to HTML as substitute of Markdown
    (org-set-emph-re 'org-emphasis-regexp-components
                     '(" \t({"
                       "- \t.,:!?;)}[:multibyte:]"
                       " \t\r\n,"
                       "."
                       1))

    ;; highlight code blocks syntax in PDF export
    ;; Include the latex-exporter
    (use-package ox-latex :straight nil)
    (setq org-latex-packages-alist nil
          org-latex-default-packages-alist nil
          org-latex-hyperref-template nil)
    ;; Tell the latex export to use the minted package for source
    ;; code coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex
    ;; execute external programs.
    (setq org-latex-pdf-process '("~/.bin/ctex %f"))

    ;; tasks management
    (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
    (setq org-log-done t
          org-clock-idle-time nil
          org-todo-keywords (quote
                             ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                              (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)" "PHONE" "MEETING"))))

    ;; agenda & diary
    (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
    (setq org-agenda-include-diary nil
          org-agenda-tags-todo-honor-ignore-options t
          org-agenda-start-on-weekday nil
          org-agenda-start-day "-1d"
          org-agenda-span 7
          org-agenda-timegrid-use-ampm 1
          org-agenda-inhibit-startup t
          org-agenda-files (quote
                            ("~/org/work.org"
                             "~/org/stuff.org")))

    (setq org-agenda-custom-commands
          '(("Q" . "Custom queries") ;; gives label to "Q"
            ("Qa" "Archive search" search "" ((org-agenda-files (file-expand-wildcards "~/org/archive.org"))))
            ("n" todo "NEXT")
            ("w" todo "WAITING")
            ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))

    ;; date insertion configuration
    (setq org-expiry-created-property-name "CREATED"
          org-expiry-inactive-timestamps t
          org-todo-state-tags-triggers (quote
                                        (("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING" ("WAITING" . t))
                                         ("HOLD" ("WAITING") ("HOLD" . t))
                                         (done ("WAITING") ("HOLD"))
                                         ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
    ;; capture
    (setq org-capture-templates
          '(("w" "Work TODO" entry (file+olp "~/org/work.org" "Tasks") "* TODO %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TASKS\n:CREATED: %U\n:END:")
            ("o" "Work Overtime" entry (file+olp "~/org/work.org" "COMMENT Overtime") "* %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CREATED: %U\n:END:")
            ("m" "Work Meetings" entry (file+olp "~/org/work.org" "Meetings") "* %? \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: MEETINGS\n:CREATED: %U\n:END:")
            ("t" "Work Training's" entry (file+olp "~/org/work.org" "Training's") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TRAINING'S\n:CREATED: %U\n:END:")
            ("S" "Stuff TODO" entry (file+olp "~/org/stuff.org" "Tasks") "* TODO %? \n:PROPERTIES:\n:CATEGORY: TASKS\n:CREATED: %U\n:END:")
            ("M" "Stuff Meetings" entry (file+olp "~/org/stuff.org" "Meetings") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: MEETINGS\n:CREATED: %U\n:END:")
            ("T" "Stuff Training's" entry (file+olp "~/org/stuff.org" "Training's") "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:PROPERTIES:\n:CATEGORY: TRAINING'S\n:CREATED: %U\n:END:")))

    ;; configure the external apps to open files
    (add-to-list (quote org-file-apps)
                 (quote ("\\.pdf\\'" lambda (file link) (org-pdfview-open link))))

    ;; protect hidden trees for being inadvertily edited (do not work with evil)
    (setq-default org-catch-invisible-edits  'error
                  org-ctrl-k-protect-subtree 'error)

    ;; limit images width
    (setq org-image-actual-width (/ (display-pixel-width) 5))

    (defun my-org-mode-hook ()
      (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
    (add-hook 'org-mode-hook #'my-org-mode-hook)

    ;; :::::: Org-Babel ::::::
    ;; languages supported
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
             (org . t))))
    (setq org-babel-python-command "python")

    (defun conf:org-confirm-babel-evaluate (lang body)
      (not (member lang '("emacs-lisp" "python" "sh"))))

    (setq org-confirm-babel-evaluate 'conf:org-confirm-babel-evaluate)

    (defalias 'org-babel-execute:elisp 'org-babel-execute:emacs-lisp)

    ;; refresh images after execution
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)))

;; ;; Disable flycheck when edit org-src-block
;; (defun disable-fylcheck-in-org-src-block ()
;;   (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

;; (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)))

(use-package org-indent-mode
  :straight nil
  :diminish org-indent-mode
  :hook (org-mode . org-indent-mode))

(use-package ob-sql
  :defer t
  :straight org-plus-contrib
  :commands (org-babel-execute:sql))

(use-package ob-python
  :defer t
  :straight org-plus-contrib
  :commands (org-babel-execute:python))

(use-package ob-shell
  :defer t
  :straight org-plus-contrib
  :commands (org-babel-execute:sh
             org-babel-expand-body:sh
             org-babel-execute:bash
             org-babel-expand-body:bash))

(use-package ob-plantuml
  :defer t
  :straight org-plus-contrib
  :commands (org-babel-execute:plantuml))

(use-package org-timeline
  :init (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))

(use-package secretaria
  :init
  (setf secretaria-clocked-task-save-file "~/.secretaria-tarea")
  (add-hook 'after-init-hook #'secretaria-unknown-time-always-remind-me))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(use-package org-inlinetask
  :straight nil
  :config
  (defun org-power-return (&optional ignore)
    "Add new list item, heading or table row with RET.
       A double return on an empty element deletes it.
       Use a prefix arg to get regular RET. "
    (interactive "P")
    (if ignore
        (org-return)
      (cond
       ((eq 'line-break (car (org-element-context)))
        (org-return-indent))

       ;; Open links like usual, unless point is at the end of a line.
       ;; and if at beginning of line, just press enter.
       ((or (and (eq 'link (car (org-element-context))) (not (eolp)))
            (bolp))
        (org-return))

       ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
       ;; Johansson!
       ((org-inlinetask-in-task-p)
        (org-return))

       ;; checkboxes too
       ((org-at-item-checkbox-p)
        (org-insert-todo-heading nil))

       ;; lists end with two blank lines, so we need to make sure we are also not
       ;; at the beginning of a line to avoid a loop where a new entry gets
       ;; created with only one blank line.
       ((org-in-item-p)
        (if (save-excursion (beginning-of-line) (org-element-property :contents-begin (org-element-context)))
            (org-insert-heading)
          (beginning-of-line)
          (delete-region (line-beginning-position) (line-end-position))
          (org-return)))

       ;; org-heading
       ((org-at-heading-p)
        (if (not (string= "" (org-element-property :title (org-element-context))))
            (progn (org-end-of-meta-data)
                   (org-insert-heading-respect-content)
                   (outline-show-entry))
          (beginning-of-line)
          (setf (buffer-substring
                 (line-beginning-position) (line-end-position)) "")))

       ;; tables
       ((org-at-table-p)
        (if (-any?
             (lambda (x) (not (string= "" x)))
             (nth
              (- (org-table-current-dline) 1)
              (org-table-to-lisp)))
            (org-return)
          ;; empty row
          (beginning-of-line)
          (setf (buffer-substring
                 (line-beginning-position) (line-end-position)) "")
          (org-return)))

       ;; fall-through case
       (t
        (org-return)))))
  (define-key org-mode-map (kbd "RET") 'org-power-return))

(use-package ob-async)

(use-package ob-translate)

(use-package ox-reveal)

(use-package htmlize)

;; https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el#L1581
(use-package org-tree-slide
  :config
  (progn
    (setq org-tree-slide--lighter " Slide")

    (defvar conf:org-tree-slide-text-scale 4
      "Text scale ratio to default when `org-tree-slide-mode' is enabled.")

    (defun conf:org-tree-slide-set-profile ()
      "Customize org-tree-slide variables."
      (interactive)
      (setq org-tree-slide-header t)
      (setq org-tree-slide-slide-in-effect nil)
      (setq org-tree-slide-heading-emphasis t)
      (setq org-tree-slide-cursor-init t) ;Move cursor to the head of buffer
      (setq org-tree-slide-modeline-display 'lighter)
      (setq org-tree-slide-skip-done nil)
      (setq org-tree-slide-skip-comments t)
      (setq org-tree-slide-activate-message
            (concat "Starting Org presentation. "
                    "Use arrow keys to navigate the slides."))
      (setq org-tree-slide-deactivate-message "Ended presentation.")
      (message "Custom `org-tree-slide' profile: ON"))

    (defvar conf:writegood-mode-state nil
      "Variable to store the state of `writegood-mode'.")

    (defun conf:org-tree-slide-start ()
      "Set up the frame for the slideshow."
      (interactive)
      (when (fboundp 'writegood-mode)
        (setq conf:writegood-mode-state writegood-mode)
        (writegood-mode -1))
      (flyspell-mode -1)
      (text-scale-set conf:org-tree-slide-text-scale))
    (add-hook 'org-tree-slide-play-hook #'conf:org-tree-slide-start)

    (defun conf:org-tree-slide-stop()
      "Undo the frame setup for the slideshow."
      (interactive)
      (when (and (fboundp 'writegood-mode)
                 conf:writegood-mode-state)
        (writegood-mode 1)
        (setq conf:writegood-mode-state nil))
      (flyspell-mode 1)
      (text-scale-set 0))
    (add-hook 'org-tree-slide-stop-hook #'conf:org-tree-slide-stop)

    (defun conf:org-tree-slide-text-scale-reset ()
      "Reset time scale to `modi/org-tree-slide-text-scale'."
      (interactive)
      (text-scale-set conf:org-tree-slide-text-scale))

    (defun conf:org-tree-slide-text-scale-inc1 ()
      "Increase text scale by 1."
      (interactive)
      (text-scale-increase 1))

    (defun conf:org-tree-slide-text-scale-dec1 ()
      "Decrease text scale by 1."
      (interactive)
      (text-scale-decrease 1))

    (bind-keys
     :map org-tree-slide-mode-map
     ("C-b" . org-tree-slide-move-previous-tree)
     ("C-f" . org-tree-slide-move-next-tree)
     ("C-0" . conf:org-tree-slide-text-scale-reset)
     ("C-+" . conf:org-tree-slide-text-scale-inc1)
     ("C--" . conf:org-tree-slide-text-scale-dec1)
     ("C-1" . org-tree-slide-content)
     ("C-2" . conf:org-tree-slide-set-profile)
     ("C-3" . org-tree-slide-simple-profile)
     ("C-4" . org-tree-slide-presentation-profile))))
#+end_src
* Pacfiles
#+begin_src emacs-lisp
  (use-package pacfiles-mode)
#+end_src
* Parents
#+begin_src emacs-lisp
  (electric-pair-mode 1)

  (use-package paren
    :init (show-paren-mode)
    :config
    (set-face-background 'show-paren-match (face-background 'default))
    (set-face-foreground 'show-paren-match "#def")
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

  (use-package smartparens
    :commands
    (smartparens-mode
     smartparens-strict-mode)
    :bind
    (:map smartparens-strict-mode-map
          ("C-}" . sp-forward-slurp-sexp)
          ("M-s" . sp-backward-unwrap-sexp)
          ("C-c [" . sp-select-next-thing)
          ("C-c ]" . sp-select-next-thing-exchange))
    :config
    (require 'smartparens-config))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))
#+end_src
* Pdf Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :bind (:map pdf-view-mode-map
                ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
                ("g"  . pdf-view-first-page)
                ("G"  . pdf-view-last-page)
                ("l"  . image-forward-hscroll)
                ("h"  . image-backward-hscroll)
                ("j"  . pdf-view-next-line-or-next-page)
                ("k"  . pdf-view-previous-line-or-previous-page)
                ("e"  . pdf-view-goto-page)
                ("t"  . pdf-view-goto-label)
                ("u"  . pdf-view-revert-buffer)
                ("al" . pdf-annot-list-annotations)
                ("ad" . pdf-annot-delete)
                ("aa" . pdf-annot-attachment-dired)
                ("am" . pdf-annot-add-markup-annotation)
                ("at" . pdf-annot-add-text-annotation)
                ("y"  . pdf-view-kill-ring-save)
                ("i"  . pdf-misc-display-metadata)
                ("s"  . pdf-occur)
                ("b"  . pdf-view-set-slice-from-bounding-box)
                ("r"  . pdf-view-reset-slice))
    :init
    (pdf-tools-install t t)
    :config
    (setq pdf-misc-print-programm "/usr/bin/gtklp"
          pdf-misc-print-programm-args (quote ("-o media=A4" "-o fitplot"))
          pdf-view-display-size 'fit-page
          pdf-view-use-imagemagick t
          pdf-view-midnight-colors '("white smoke" . "gray5")))

  (use-package org-pdfview
    :after org)
#+end_src
* Pkgbuil
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
    :mode "PKGBUILD\\'")
#+end_src
* Plantuml
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config (setq plantuml-jar-path "/opt/plantuml/plantuml.jar"
                  org-plantuml-jar-path "/opt/plantuml/plantuml.jar"))

  (use-package flycheck-plantuml
    :after flycheck
    :config (flycheck-plantuml-setup))
#+end_src
* PO
#+begin_src emacs-lisp
  (use-package po-mode
    :straight nil
    :mode ("\\.po\\'" . po-mode)
    :config
    ;; Fuente: https://www.emacswiki.org/emacs/PoMode
    (defun po-wrap ()
      "Filter current po-mode buffer through `msgcat' tool to wrap all lines."
      (interactive)
      (if (eq major-mode 'po-mode)
          (let ((tmp-file (make-temp-file "po-wrap."))
                (tmp-buf (generate-new-buffer "*temp*")))
            (unwind-protect
                (progn
                  (write-region (point-min) (point-max) tmp-file nil 1)
                  (if (zerop
                       (call-process
                        "msgcat" nil tmp-buf t (shell-quote-argument tmp-file)))
                      (let ((saved (point))
                            (inhibit-read-only t))
                        (delete-region (point-min) (point-max))
                        (insert-buffer-substring tmp-buf)
                        (goto-char (min saved (point-max))))
                    (with-current-buffer tmp-buf
                      (error (buffer-string)))))
              (kill-buffer tmp-buf)
              (delete-file tmp-file)))))

    (defun po-guess-language ()
      "Return the language related to this PO file."
      (save-excursion
        (goto-char (point-min))
        (re-search-forward po-any-msgstr-block-regexp)
        (goto-char (match-beginning 0))
        (if (re-search-forward
             "\n\"Language: +\\(.+\\)\\\\n\"$"
             (match-end 0) t)
            (po-match-string 1))))

    (defadvice po-edit-string (around setup-spell-checking (string type expand-tabs) activate)
      "Set up spell checking in subedit buffer."
      (let ((po-language (po-guess-language)))
        ad-do-it
        (if po-language
            (progn
              (ispell-change-dictionary po-language)
              (turn-on-flyspell)
              (flyspell-buffer))))))
#+end_src
* Prescient
#+begin_src emacs-lisp
  (use-package prescient
    :config
    (setq prescient-save-file (concat conf:cache-dir "prescient.el"))
    (prescient-persist-mode))
#+end_src
* Presentación
#+begin_src emacs-lisp
  (use-package presentation
    :config (global-set-key (kbd "<M-f5>") (lambda ()
                                             (interactive)
                                             (if presentation-mode
                                                 (presentation-mode 0)
                                               (presentation-mode 1))
                                             (toggle-frame-fullscreen))))
#+end_src
* Pretty Symbols
#+begin_src emacs-lisp
(use-package prog-mode
  :straight nil
  :config
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (global-prettify-symbols-mode t)
  (add-hook 'prog-mode-hook
            (lambda ()
              (mapc (lambda (pair) (push pair prettify-symbols-alist))
                    '(("in" . ?\u2208)
                      ("not in" . ?\u2209)
                      ("not" . ?\u00AC)
                      ("==" . ?\u2261)
                      ("!=" . ?\u2260)
                      (">=" . ?\u2265)
                      ("<=" . ?\u2264)))))
  (defun indicate-buffer-boundaries-left ()
    (setq indicate-buffer-boundaries 'left))
  (add-hook 'prog-mode-hook #'indicate-buffer-boundaries-left)
  (add-hook 'prog-common-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("\\<\\(FIX\\|FIXME\\|TODO\\|BUG\\|HACK\\):" 1 font-lock-warning-face t))))))
#+end_src
* Proced
#+begin_src emacs-lisp
  (use-package proced
    :bind ("C-x p" . proced)
    :if (or (string-equal system-type "gnu/linux")
            (string-equal system-type "gnu/kfreebsd"))
    :config
    (add-hook 'proced-mode-hook (lambda () (setq proced-tree-flag t))))
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (setq projectile-known-projects-file (concat conf:cache-dir "projectile-bookmarks.eld")
          projectile-cache-file (concat conf:cache-dir "projectile.cache")
          projectile-file-exists-remote-cache-expire (* 10 60)
          projectile-indexing-method 'alien
          projectile-enable-caching t
          projectile-completion-system 'ivy)
    (projectile-mode))

  (use-package counsel-projectile
    :bind (("C-x r R" . counsel-projectile-rg)
           ("<C-tab>" . counsel-projectile-switch-project))
    :config
    (add-hook 'text-mode-hook 'counsel-projectile-mode)
    (add-hook 'prog-mode-hook 'counsel-projectile-mode))

  (defun conf:switch-to-project-buffer-if-in-project (arg)
    "Custom switch to buffer.
    With universal argument ARG or when not in project, rely on
    `ivy-switch-buffer'.
    Otherwise, use `counsel-projectile-switch-to-buffer'."
        (interactive "P")
        (if (or arg
                (not (projectile-project-p)))
            (ivy-switch-buffer)
          (counsel-projectile-switch-to-buffer)))

  (bind-key* "C-x b" #'conf:switch-to-project-buffer-if-in-project)

  (use-package term-projectile)

  (use-package rg
    :config (setq rg-command-line-flags (list "-uuu")))
#+end_src
* Python
** python-template
#+begin_src emacs-lisp
(setq ansi-color-for-comint-mode t)
(defun python-template ()
  (interactive)
  (insert "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n"))

(add-hook 'python-mode-hook
          '(lambda ()
             (when (empty-buffer?) (python-template))))

#+end_src
** Elpy
#+begin_src emacs-lisp
(use-package elpy
  :diminish elpy-mode
  :config
  (elpy-enable)
  (setq elpy-rpc-backend "jedi"
        elpy-shell-echo-input nil
        elpy-modules (dolist (elem
                              '(elpy-module-sane-defaults
                                elpy-module-company
                                elpy-module-eldoc
                                elpy-module-highlight-indentation
                                elpy-module-pyvenv
                                elpy-module-yasnippet
                                elpy-module-flymake))))

  (add-to-list 'company-backends 'elpy-company-backend)
  (require 'smartparens-python)
  (require 'electric)

  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))

  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  (defun prelude-python--encoding-comment-required-p ()
    (re-search-forward "[^\0-\177]" nil t))

  (defun prelude-python--detect-encoding ()
    (let ((coding-system
           (or save-buffer-coding-system
               buffer-file-coding-system)))
      (if coding-system
          (symbol-name
           (or (coding-system-get coding-system 'mime-charset)
               (coding-system-change-eol-conversion coding-system nil)))
        "ascii-8bit")))

  (defun prelude-python--insert-coding-comment (encoding)
    (let ((newlines (if (looking-at "^\\s *$") "\n" "\n\n")))
      (insert (format "# coding: %s" encoding) newlines)))

  (defun prelude-python-mode-set-encoding ()
    "Insert a magic comment header with the proper encoding if necessary."
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (prelude-python--encoding-comment-required-p)
        (goto-char (point-min))
        (let ((coding-system (prelude-python--detect-encoding)))
          (when coding-system
            (if (looking-at "^#!") (beginning-of-line 2))
            (cond ((looking-at "\\s *#\\s *.*\\(en\\)?coding\\s *:\\s *\\([-a-z0-9_]*\\)")
                   ;; update existing encoding comment if necessary
                   (unless (string= (match-string 2) coding-system)
                     (goto-char (match-beginning 2))
                     (delete-region (point) (match-end 2))
                     (insert coding-system)))
                  ((looking-at "\\s *#.*coding\\s *[:=]"))
                  (t (prelude-python--insert-coding-comment coding-system)))
            (when (buffer-modified-p)
              (basic-save-buffer-1)))))))

  (when (fboundp 'exec-path-from-shell-copy-env)
    (exec-path-from-shell-copy-env "PYTHONPATH"))

  (defun prelude-python-mode-defaults ()
    "Defaults for Python programming."
    (subword-mode +1)
    (eldoc-mode 1)
    (setq-local electric-layout-rules
                '((?: . (lambda ()
                          (and (zerop (first (syntax-ppss)))
                               (python-info-statement-starts-block-p)
                               'after)))))
    (when (fboundp #'python-imenu-create-flat-index)
      (setq-local imenu-create-index-function
                  #'python-imenu-create-flat-index))
    (add-hook 'post-self-insert-hook
              #'electric-layout-post-self-insert-function nil 'local)
    (add-hook 'after-save-hook 'prelude-python-mode-set-encoding nil 'local))

  (setq prelude-python-mode-hook 'prelude-python-mode-defaults)

  (add-hook 'python-mode-hook (lambda ()
                                (run-hooks 'prelude-python-mode-hook))))
#+end_src
** lsp-python
#+begin_src emacs-lisp :tangle no
(use-package python
  :config
  (setq python-shell-interpreter "python"
        lsp-pyls-configuration-sources ["flake8"]
        lsp-pyls-plugins-pylint-enabled nil
        lsp-pyls-plugins-pyflakes-enable nil)
  (add-hook 'python-mode-hook 'lsp))
#+end_src
** Virtualenv
#+begin_src emacs-lisp
(use-package auto-virtualenv
  :hook (elpy-mode . auto-virtualenv-set-virtualenv))
#+end_src
** PEP8
#+begin_src emacs-lisp
(use-package blacken
  :diminish blacken-mode
  :config (setq blacken-fast-unsafe t)
  :hook (python-mode . blacken-mode))

(use-package py-isort
  :config
  (setq py-isort-options '("--lines=100"))
  (add-hook 'before-save-hook 'py-isort-before-save))
#+end_src
** Stuff
#+begin_src emacs-lisp
(use-package pyimport)

(use-package pip-requirements)
#+end_src
* Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :config
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'conf-mode-hook 'rainbow-mode))
#+end_src
* recentf
#+begin_src emacs-lisp
  (use-package recentf
    :straight nil
    :config
    (setq recentf-save-file (concat conf:cache-dir "recentf")
          recentf-exclude '("/tmp/" "/ssh:" "/sudo:" "/scp:" "/scpx:" "/ssh:" "/media/data/org/" "conf:cache-dir" "~/.mail")
          recentf-max-saved-items 15
          recentf-max-menu-items 15
          recentf-keep '(file-remote-p file-readable-p)
          recentf-auto-cleanup 'never)
    (recentf-mode +1))
#+end_src
* restart emacs
  #+begin_src emacs-lisp
    (use-package restart-emacs)
  #+end_src
* Saveplace
#+begin_src emacs-lisp
  (use-package saveplace
    :init (save-place-mode)
    :config
    (progn
      (setq save-place-file (concat conf:cache-dir "saveplace.el"))
      (setq-default save-place t)))
#+end_src
* Scroll
#+begin_src emacs-lisp
  (setq scroll-step 1
        scroll-conservatively 10000)

  (setq scroll-margin 80
        scroll-conservatively 3000)

  (use-package smooth-scrolling
    :config (setq smooth-scroll-margin 5))
#+end_src
* Semantic
#+begin_src emacs-lisp
  (use-package semantic
    :straight nil
    :config (semantic-mode 1))
#+end_src
* Shackle
#+begin_src emacs-lisp
  (use-package shackle
    :init (shackle-mode)
    :config
    (setq shackle-default-size 0.4)
    (setq shackle-rules
          '(("*Calendar*" :select t :size 0.3 :align below)
            ("*Compile-Log*" :ignore t)
            ("*Completions*" :size 0.3  :align t)
            ("*format-all-errors*" :select t :size 0.1 :align below)
            ("*Help*" :select t :inhibit-window-quit t :other t)
            ("*Messages*" :select nil :inhibit-window-quit t :other t)
            ("*Process List*" :select t :size 0.3 :align below)
            ("*Proced*" :select t :size 0.3 :align below)
            ("*Python*" :select t :size 0.3 :align bellow)
            ("*Shell Command Output*" :select nil)
            ("*Warnings*" :ignore t)
            ("*el-get bootstrap*" :ignore t)
            ("*undo-tree*" :size 0.25 :align left)
            ("\\*Async Shell.*\\*" :regexp t :ignore t)
            ("\\*[Wo]*Man.*\\*" :regexp t :select t :inhibit-window-quit t :other t)
            ("\\*poporg.*\\*" :regexp t :select t :other t)
            ("\\*shell*\\*" :select t :other t)
            ("\\`\\*ivy.*?\\*\\'" :regexp t :size 0.3 :align t)
            ("edbi-dbviewer" :regexp t :select t :same t)
            ("*edbi:query-result" :regexp t :size 0.8 :align bellow)
            (occur-mode :select nil :align t)
            (pdf-view-mode :other t)
            (compilation-mode :select nil))))
#+end_src
* Shell
#+begin_src emacs-lisp
  (use-package terminal-here
    :bind (("C-<f5>" . terminal-here-launch)
           ("C-<f6>" . terminal-here-project-launch))
    :config (setq terminal-here-terminal-command (list "urxvtcd" "-e" "tmux")))
#+end_src
* SQL
#+begin_src emacs-lisp
  (use-package edbi-database-url)

  (use-package edbi-minor-mode
    :config
    (add-hook 'sql-mode-hook 'edbi-minor-mode))

  (use-package company-edbi
    :init
    (defun cfg:edbi-mode-hook()
      (add-to-list 'company-backends 'company-edbi))
    (add-hook 'edbi:sql-mode-hook 'cfg:edbi-mode-hook))

  (use-package sqlup-mode
    :bind ("C-c u" . sqlup-capitalize-keywords-in-region)
    :init
    (add-hook 'sql-mode-hook 'sqlup-mode)
    (add-hook 'edbi:sql-mode-hook 'sqlup-mode)
    (add-hook 'sql-interactive-mode-hook 'sqlup-mode))

  (use-package sql-indent
    :after sql
    :bind (:map sql-mode-map (("C-c \\" . sql-indent-buffer))))

  (use-package sqlformat
    :config (add-hook 'sql-mode-hook 'sqlformat-mode))
#+end_src
* SSH
#+begin_src emacs-lisp
  (use-package ssh
    :init
    (add-hook 'ssh-mode-hook
              (lambda ()
                (setq ssh-directory-tracking-mode t)
                (shell-dirtrack-mode t)
                (setq dirtrackp nil))))
#+end_src
* Status Line
#+begin_src emacs-lisp
;; Original http://kitchingroup.cheme.cmu.edu/blog/2014/09/19/A-git-status-Emacs-modeline/

(defun in-git-p ()
  (not (string-match "^fatal" (shell-command-to-string "sh -c 'git rev-parse --git-dir'"))))

(defun git-parse-status ()
  (interactive)
  (let ((U 0)   ; untracked files
        (M 0)   ; modified files
        (D 0)   ; deleted files
        (S 0)   ; other files
        (C 0)   ; conflict files
        (U-files "")
        (M-files "")
        (D-files "")
        (S-files "")
        (C-files ""))
    (dolist (line (split-string
                   (shell-command-to-string "sh -c 'git status --porcelain'")
                   "\n"))
      (cond

       ;; ignore empty line at end
       ((string= "" line) nil)

       ((string-match "^\\?\\?" line)
        (setq U (+ 1 U))
        (setq U-files (concat U-files "\n" line)))

       ((string-match "^ D" line)
        (setq D (+ 1 D))
        (setq D-files (concat D-files "\n" line)))


       ((string-match "^ M" line)
        (setq M (+ 1 M))
        (setq M-files (concat M-files "\n" line)))

       ((string-match "^ U" line)
        (setq C (+ 1 C))
        (setq C-files (concat C-files "\n" line)))

       (t
        (setq S (+ 1 S))
        (setq S-files (concat S-files "\n" line)))))

    (if (or (> M 0) (> D 0) (> U 0) (> S 0) (> C 0))
        ;; construct propertized string
        (concat
         (if (not (= C 0))
             (propertize
              (format "✖%d" C)
              'face '(:inherit font-lock-warning-face)
              'help-echo C-files))

         (if (not (= S 0))
             (propertize
              (format "●%d" S)
              'face '(:inherit font-lock-warning-face)
              'help-echo S-files))

         (if (> D 0)
             (propertize
              (format "-%d" D)
              'face '(:inherit font-lock-warning-face)
              'help-echo D-files))

         (if (> M 0)
             (propertize
              (format "+%d" M)
              'face '(:inherit font-lock-variable-name-face)
              'help-echo M-files))

         (if (> U 0)
             (propertize
              (format "…%d" U)
              'help-echo U-files))
         " ")
      (propertize
       "✔ "
       'face '(:inherit font-lock-string-face)))))

(defun git-remote-status ()
  (interactive)
  (let* (;; get the branch we are on.
         (branch (s-trim
                  (shell-command-to-string
                   "git rev-parse --abbrev-ref HEAD")))
         ;; get the remote the branch points to.
         (remote (s-trim
                  (shell-command-to-string
                   (format "git config branch.%s.remote" branch))))
         (remote-branch (s-trim
                         (shell-command-to-string
                          "git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)")))
         (commits (split-string
                   (s-trim
                    (shell-command-to-string
                     (format
                      "git rev-list --count --left-right HEAD...%s"
                      remote-branch)))))
         (local (nth 0 commits))
         (remotes (nth 1 commits)))
    (concat
     (propertize
      (format "%s" branch)
      'face (list :inherit font-lock-comment-face))
     (if (> (string-to-number local) 0)
         (format "↑%s" local))
     (if (> (string-to-number remotes) 0)
         (format "↓%s" remotes)))))

(add-to-list 'mode-line-misc-info
             '(:eval (when (not (tramp-tramp-file-p default-directory))
                       (if (in-git-p)
                           (concat (git-remote-status) " " (git-parse-status))))))

(setq line-number-mode t
      column-number-mode t)

(use-package smart-mode-line
  :config
  (setq sml/mode-width 'full
        sml/no-confirm-load-theme t
        sml/theme 'respectful
        sml/shorten-modes t)
  (sml/setup)
  :hook (after-init . smart-mode-line-enable))
#+end_src
* Sudo
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src
* Switch Windows
#+begin_src emacs-lisp
  (use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x 1" . switch-window-then-maximize)
           ("C-x 2" . switch-window-then-split-below)
           ("C-x 3" . switch-window-then-split-right)
           ("C-x 0" . switch-window-then-delete)))
#+end_src
* Tablero
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package page-break-lines
  :diminish page-break-lines-mode
  :config (page-break-lines-mode))

(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title (concat "kernel " (car (split-string (shell-command-to-string "uname -r") "-"))
                                            " x86_64 " (car (split-string (shell-command-to-string ". /etc/os-release && echo $PRETTY_NAME") "\n")))
        show-week-agenda-p t
        dashboard-set-init-info t
        dashboard-center-content t
        dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5))
        initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*"))))
#+end_src
* Theme
#+begin_src emacs-lisp
  (use-package vibrant-ink-theme
    :straight (vibrant-ink-theme :type git :host github :repo "arkhan/vibrant-ink-theme")
    :init (add-hook 'after-init-hook
                    (lambda ()
                      (load-theme 'vibrant-ink t))))
#+end_src
* Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :config
    (setq tramp-default-method "scp"
          tramp-persistency-file-name (concat conf:cache-dir "tramp")
          tramp-auto-save-directory (concat conf:cache-dir "tramp-autosave")
          tramp-debug-buffer t
          tramp-verbose 10
          tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>] *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
    (tramp-set-completion-function "ssh" '((tramp-parse-sconfig "/etc/ssh_config")
                                           (tramp-parse-sconfig "~/.ssh/config"))))

  (use-package counsel-tramp
    :bind ("C-c s" . counsel-tramp)
    :config
    (add-hook 'counsel-tramp-pre-command-hook '(lambda () (projectile-mode 0)
                                                 (editorconfig-mode 0)))
    (add-hook 'counsel-tramp-quit-hook '(lambda () (projectile-mode 1)
                                          (editorconfig-mode 1))))
#+end_src
* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :bind ("C-x u" . undo-tree-visualizer)
    :init
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".7z")))
    (defadvice undo-tree-visualize (around undo-tree-split-side-by-side activate)
      "Divide la ventana de lado a lado al visualizar undo-tree-visualize"
      (let ((split-height-threshold nil)
            (split-width-threshold 0))
        ad-do-it))
    (setq undo-tree-dir (concat conf:cache-dir "undo/"))
    (make-directory undo-tree-dir :parents)
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t
          undo-tree-auto-save-history nil)
    :config
    (defalias 'redo 'undo-tree-redo)
    (global-undo-tree-mode 1))
#+end_src
* UTF-8
#+begin_src emacs-lisp
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix
                x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
* VLF
#+begin_src emacs-lisp
  (use-package vlf-setup
    :straight vlf
    :init (setq vlf-application 'dont-ask))
#+end_src
* Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-sort-order 'which-key-key-order-alpha)
    (which-key-mode))

  (use-package which-key-posframe
    :config
    (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-left-corner
          which-key-posframe-border-width 0)
    (which-key-posframe-mode))
#+end_src
* XML
#+begin_src emacs-lisp
  (defun nxml-template ()
    (interactive)
    (insert "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n"))

  (add-hook 'nxml-mode-hook
            '(lambda () (when (empty-buffer?) (nxml-template))))

  (use-package nxml-mode
    :straight nil
    :mode (("\\.plist\\'" . nxml-mode)
           ("\\.rss\\'"   . nxml-mode)
           ("\\.svg\\'"   . nxml-mode)
           ("\\.xml\\'"   . nxml-mode)
           ("\\.xsd\\'"   . nxml-mode)
           ("\\.xslt\\'"  . nxml-mode)
           ("\\.pom$"     . nxml-mode))
    :config
    (setq nxml-slash-auto-complete-flag t
                   nxml-auto-insert-xml-declaration-flag t)
    (add-to-list 'magic-mode-alist '("<\\?xml" . nxml-mode))
    (mapc
     (lambda (pair)
       (if (or (eq (cdr pair) 'xml-mode)
               (eq (cdr pair) 'sgml-mode))
           (setcdr pair 'nxml-mode)))
     auto-mode-alist)

    ;; https://gist.github.com/DinoChiesa/5489021
    (defun pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
      http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
      this. The function inserts linebreaks to separate tags that have
      nothing but whitespace between them. It then indents the markup
      by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        ;; split <foo><bar> or </foo><bar>, but not <foo></foo>
        (goto-char begin)
        (while (search-forward-regexp ">[ \t]*<[^/]" end t)
          (backward-char 2) (insert "\n") (incf end))
        ;; split <foo/></foo> and </foo></foo>
        (goto-char begin)
        (while (search-forward-regexp "<.*?/.*?>[ \t]*<" end t)
          (backward-char) (insert "\n") (incf end))
        ;; put xml namespace decls on newline
        (goto-char begin)
        (while (search-forward-regexp "\\(<\\([a-zA-Z][-:A-Za-z0-9]*\\)\\|['\"]\\) \\(xmlns[=:]\\)" end t)
          (goto-char (match-end 0))
          (backward-char 6) (insert "\n") (incf end))
        (indent-region begin end nil)
        (normal-mode))
      (message "All indented!"))


    (defun pretty-print-xml-buffer ()
      "pretty print the XML in a buffer."
      (interactive)
      (pretty-print-xml-region (point-min) (point-max)))

    (define-key nxml-mode-map (kbd "C-x f") 'pretty-print-xml-buffer))

#+end_src
* xrdb
#+begin_src emacs-lisp
  (use-package xrdb-mode
    :straight (xrdb-mode :type git :host github :repo "arkhan/xrdb-mode")
    :mode (("\\.Xdefaults$" . xrdb-mode)
           ("\\.Xenvironment$" . xrdb-mode)
           ("\\.Xresources$" . xrdb-mode)
           (".*\\.ad$" . xrdb-mode)
           (".*\\.x?rdb$" . xrdb-mode))
    :config
    (add-hook 'xrdb-mode-hook (lambda () (setq comment-start "! "))))
#+end_src
* Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src
* YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 2
    :diminish yas-minor-mode
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode))

  (use-package yasnippet-snippets)

  (use-package org-sync-snippets
    :init (add-hook 'yas-after-reload-hook 'org-sync-snippets-org-to-snippets)
    :custom (org-sync-snippets-org-snippets-file "~/.emacs.d/snippets/snippets.org"))
#+end_src
* YAY
#+begin_src emacs-lisp
(use-package system-packages
  :config
  (add-to-list 'system-packages-supported-package-managers
               '(yay .
                     ((default-sudo . nil)
                      (install . "yay -S")
                      (search . "yay -Ss")
                      (uninstall . "yay -Rs")
                      (update . "yay -Syu")
                      (clean-cache . "yay -Sc")
                      (log . "cat /var/log/pacman.log")
                      (get-info . "yay -Qi")
                      (get-info-remote . "yay -Si")
                      (list-files-provided-by . "yay -Ql")
                      (verify-all-packages . "yay -Qkk")
                      (verify-all-dependencies . "yay -Dk")
                      (remove-orphaned . "yay -Rns $(pacman -Qtdq)")
                      (list-installed-packages . "yay -Qe")
                      (list-installed-packages-all . "yay -Q")
                      (list-dependencies-of . "yay -Qi")
                      (noconfirm . "--noconfirm"))))
  (setq system-packages-packagemanager 'yay))
#+end_src
* Ztree
#+begin_src emacs-lisp :tangle no
  (use-package ztree
    :bind (("C-c z" . ztree-diff))
    :config
    (setq ztree-draw-unicode-lines t
          ztree-dir-move-focus t))
#+end_src
* Startup
#+begin_src emacs-lisp
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216
                    gc-cons-percentage 0.1
                    file-name-handler-alist cfg--file-name-handler-alist)
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src
* EXWM
** Clipboard
#+begin_src emacs-lisp
(use-package gpastel
  :if (string= (getenv "XDG_CURRENT_DESKTOP") "exwm"))
#+end_src
** WM
#+begin_src emacs-lisp
(use-package exwm
  :if (string= (getenv "XDG_CURRENT_DESKTOP") "exwm")
  :demand t
  :preface
  (progn
    (defun my/exwm-reliable-class-p ()
      "Return t if application's class is suitable for naming."
      (and (not (string-prefix-p "sun-awt-X11-" exwm-instance-name))
           ;; gimp has several windows with the same class:
           (not (string= "gimp" exwm-instance-name))))

    (defun my/exwm-class-updated ()
      "Use class names if `my/exwm-reliable-class-p'."
      (when (my/exwm-reliable-class-p)
        (exwm-workspace-rename-buffer exwm-class-name)))

    (defun my/exwm-title-updated ()
      "Use title unless `my/exwm-reliable-class-p'."
      (unless (my/exwm-reliable-class-p)
        (exwm-workspace-rename-buffer exwm-class-name))))

  :hook ((exwm-init . gpastel-mode)
         (exwm-init . display-battery-mode)
         (exwm-init . display-time-mode)
         (exwm-update-class . my/exwm-class-updated)
         (exwm-update-title . my/exwm-title-updated))
  :config
  (setq exwm-workspace-number 4)
  (setq exwm-input-global-keys
        `(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
                      (interactive)
                      (start-process "" nil "/usr/bin/slock")))))

  (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

  (setq exwm-input-simulation-keys nil)
  (exwm-enable))

(use-package exwm-systemtray
  :straight exwm
  :config (exwm-systemtray-enable))
#+end_src
